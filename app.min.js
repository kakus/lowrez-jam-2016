(function (root) {

  // Store setTimeout reference so promise-polyfill will be unaffected by
  // other code modifying setTimeout (like sinon.useFakeTimers())
  var setTimeoutFunc = setTimeout;

  function noop() {
  }

  // Use polyfill for setImmediate for performance gains
  var asap = (typeof setImmediate === 'function' && setImmediate) ||
    function (fn) {
      setTimeoutFunc(fn, 1);
    };

  var onUnhandledRejection = function onUnhandledRejection(err) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  };

  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function () {
      fn.apply(thisArg, arguments);
    };
  }

  var isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === '[object Array]';
  };

  function Promise(fn) {
    if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    this._state = 0;
    this._handled = false;
    this._value = undefined;
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    asap(function () {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.');
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      setTimeout(function() {
        if (!self._handled) {
          onUnhandledRejection(self._value);
        }
      }, 1);
    }
    
    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(function (value) {
        if (done) return;
        done = true;
        resolve(self, value);
      }, function (reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      });
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function (onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function (onFulfilled, onRejected) {
    var prom = new Promise(noop);
    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function () {
    var args = Array.prototype.slice.call(arguments.length === 1 && isArray(arguments[0]) ? arguments[0] : arguments);

    return new Promise(function (resolve, reject) {
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(val, function (val) {
                res(i, val);
              }, reject);
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function (value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function (resolve) {
      resolve(value);
    });
  };

  Promise.reject = function (value) {
    return new Promise(function (resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function (values) {
    return new Promise(function (resolve, reject) {
      for (var i = 0, len = values.length; i < len; i++) {
        values[i].then(resolve, reject);
      }
    });
  };

  /**
   * Set the immediate function to execute callbacks
   * @param fn {function} Function to execute
   * @private
   */
  Promise._setImmediateFn = function _setImmediateFn(fn) {
    asap = fn;
  };
  
  Promise._setUnhandledRejectionFn = function _setUnhandledRejectionFn(fn) {
    onUnhandledRejection = fn;
  };

  if (typeof module !== 'undefined' && module.exports) {
    module.exports = Promise;
  } else if (!root.Promise) {
    root.Promise = Promise;
  }

})(this);
/*!
 *  howler.js v1.1.29
 *  howlerjs.com
 *
 *  (c) 2013-2016, James Simpson of GoldFire Studios
 *  goldfirestudios.com
 *
 *  MIT License
 */

(function() {
  // setup
  var cache = {};

  // setup the audio context
  var ctx = null,
    usingWebAudio = true,
    noAudio = false;
  try {
    if (typeof AudioContext !== 'undefined') {
      ctx = new AudioContext();
    } else if (typeof webkitAudioContext !== 'undefined') {
      ctx = new webkitAudioContext();
    } else {
      usingWebAudio = false;
    }
  } catch(e) {
    usingWebAudio = false;
  }

  if (!usingWebAudio) {
    if (typeof Audio !== 'undefined') {
      try {
        new Audio();
      } catch(e) {
        noAudio = true;
      }
    } else {
      noAudio = true;
    }
  }

  // create a master gain node
  if (usingWebAudio) {
    var masterGain = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
    masterGain.gain.value = 1;
    masterGain.connect(ctx.destination);
  }

  // create global controller
  var HowlerGlobal = function(codecs) {
    this._volume = 1;
    this._muted = false;
    this.usingWebAudio = usingWebAudio;
    this.ctx = ctx;
    this.noAudio = noAudio;
    this._howls = [];
    this._codecs = codecs;
    this.iOSAutoEnable = true;
  };
  HowlerGlobal.prototype = {
    /**
     * Get/set the global volume for all sounds.
     * @param  {Float} vol Volume from 0.0 to 1.0.
     * @return {Howler/Float}     Returns self or current volume.
     */
    volume: function(vol) {
      var self = this;

      // make sure volume is a number
      vol = parseFloat(vol);

      if (vol >= 0 && vol <= 1) {
        self._volume = vol;

        if (usingWebAudio) {
          masterGain.gain.value = vol;
        }

        // loop through cache and change volume of all nodes that are using HTML5 Audio
        for (var key in self._howls) {
          if (self._howls.hasOwnProperty(key) && self._howls[key]._webAudio === false) {
            // loop through the audio nodes
            for (var i=0; i<self._howls[key]._audioNode.length; i++) {
              self._howls[key]._audioNode[i].volume = self._howls[key]._volume * self._volume;
            }
          }
        }

        return self;
      }

      // return the current global volume
      return (usingWebAudio) ? masterGain.gain.value : self._volume;
    },

    /**
     * Mute all sounds.
     * @return {Howler}
     */
    mute: function() {
      this._setMuted(true);

      return this;
    },

    /**
     * Unmute all sounds.
     * @return {Howler}
     */
    unmute: function() {
      this._setMuted(false);

      return this;
    },

    /**
     * Handle muting and unmuting globally.
     * @param  {Boolean} muted Is muted or not.
     */
    _setMuted: function(muted) {
      var self = this;

      self._muted = muted;

      if (usingWebAudio) {
        masterGain.gain.value = muted ? 0 : self._volume;
      }

      for (var key in self._howls) {
        if (self._howls.hasOwnProperty(key) && self._howls[key]._webAudio === false) {
          // loop through the audio nodes
          for (var i=0; i<self._howls[key]._audioNode.length; i++) {
            self._howls[key]._audioNode[i].muted = muted;
          }
        }
      }
    },

    /**
     * Check for codec support.
     * @param  {String} ext Audio file extension.
     * @return {Boolean}
     */
    codecs: function(ext) {
      return this._codecs[ext];
    },

    /**
     * iOS will only allow audio to be played after a user interaction.
     * Attempt to automatically unlock audio on the first user interaction.
     * Concept from: http://paulbakaus.com/tutorials/html5/web-audio-on-ios/
     * @return {Howler}
     */
    _enableiOSAudio: function() {
      var self = this;

      // only run this on iOS if audio isn't already eanbled
      if (ctx && (self._iOSEnabled || !/iPhone|iPad|iPod/i.test(navigator.userAgent))) {
        return;
      }

      self._iOSEnabled = false;

      // call this method on touch start to create and play a buffer,
      // then check if the audio actually played to determine if
      // audio has now been unlocked on iOS
      var unlock = function() {
        // create an empty buffer
        var buffer = ctx.createBuffer(1, 1, 22050);
        var source = ctx.createBufferSource();
        source.buffer = buffer;
        source.connect(ctx.destination);

        // play the empty buffer
        if (typeof source.start === 'undefined') {
          source.noteOn(0);
        } else {
          source.start(0);
        }

        // setup a timeout to check that we are unlocked on the next event loop
        setTimeout(function() {
          if ((source.playbackState === source.PLAYING_STATE || source.playbackState === source.FINISHED_STATE)) {
            // update the unlocked state and prevent this check from happening again
            self._iOSEnabled = true;
            self.iOSAutoEnable = false;

            // remove the touch start listener
            window.removeEventListener('touchend', unlock, false);
          }
        }, 0);
      };

      // setup a touch start listener to attempt an unlock in
      window.addEventListener('touchend', unlock, false);

      return self;
    }
  };

  // check for browser codec support
  var audioTest = null;
  var codecs = {};
  if (!noAudio) {
    audioTest = new Audio();
    codecs = {
      mp3: !!audioTest.canPlayType('audio/mpeg;').replace(/^no$/, ''),
      opus: !!audioTest.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/, ''),
      ogg: !!audioTest.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/, ''),
      wav: !!audioTest.canPlayType('audio/wav; codecs="1"').replace(/^no$/, ''),
      aac: !!audioTest.canPlayType('audio/aac;').replace(/^no$/, ''),
      m4a: !!(audioTest.canPlayType('audio/x-m4a;') || audioTest.canPlayType('audio/m4a;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
      mp4: !!(audioTest.canPlayType('audio/x-mp4;') || audioTest.canPlayType('audio/mp4;') || audioTest.canPlayType('audio/aac;')).replace(/^no$/, ''),
      weba: !!audioTest.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/, '')
    };
  }

  // allow access to the global audio controls
  var Howler = new HowlerGlobal(codecs);

  // setup the audio object
  var Howl = function(o) {
    var self = this;

    // setup the defaults
    self._autoplay = o.autoplay || false;
    self._buffer = o.buffer || false;
    self._duration = o.duration || 0;
    self._format = o.format || null;
    self._loop = o.loop || false;
    self._loaded = false;
    self._sprite = o.sprite || {};
    self._src = o.src || '';
    self._pos3d = o.pos3d || [0, 0, -0.5];
    self._volume = o.volume !== undefined ? o.volume : 1;
    self._urls = o.urls || [];
    self._rate = o.rate || 1;

    // allow forcing of a specific panningModel ('equalpower' or 'HRTF'),
    // if none is specified, defaults to 'equalpower' and switches to 'HRTF'
    // if 3d sound is used
    self._model = o.model || null;

    // setup event functions
    self._onload = [o.onload || function() {}];
    self._onloaderror = [o.onloaderror || function() {}];
    self._onend = [o.onend || function() {}];
    self._onpause = [o.onpause || function() {}];
    self._onplay = [o.onplay || function() {}];

    self._onendTimer = [];

    // Web Audio or HTML5 Audio?
    self._webAudio = usingWebAudio && !self._buffer;

    // check if we need to fall back to HTML5 Audio
    self._audioNode = [];
    if (self._webAudio) {
      self._setupAudioNode();
    }

    // automatically try to enable audio on iOS
    if (typeof ctx !== 'undefined' && ctx && Howler.iOSAutoEnable) {
      Howler._enableiOSAudio();
    }

    // add this to an array of Howl's to allow global control
    Howler._howls.push(self);

    // load the track
    self.load();
  };

  // setup all of the methods
  Howl.prototype = {
    /**
     * Load an audio file.
     * @return {Howl}
     */
    load: function() {
      var self = this,
        url = null;

      // if no audio is available, quit immediately
      if (noAudio) {
        self.on('loaderror', new Error('No audio support.'));
        return;
      }

      // loop through source URLs and pick the first one that is compatible
      for (var i=0; i<self._urls.length; i++) {
        var ext, urlItem;

        if (self._format) {
          // use specified audio format if available
          ext = self._format;
        } else {
          // figure out the filetype (whether an extension or base64 data)
          urlItem = self._urls[i];
          ext = /^data:audio\/([^;,]+);/i.exec(urlItem);
          if (!ext) {
            ext = /\.([^.]+)$/.exec(urlItem.split('?', 1)[0]);
          }

          if (ext) {
            ext = ext[1].toLowerCase();
          } else {
            self.on('loaderror', new Error('Could not extract format from passed URLs, please add format parameter.'));
            return;
          }
        }

        if (codecs[ext]) {
          url = self._urls[i];
          break;
        }
      }

      if (!url) {
        self.on('loaderror', new Error('No codec support for selected audio sources.'));
        return;
      }

      self._src = url;

      if (self._webAudio) {
        loadBuffer(self, url);
      } else {
        var newNode = new Audio();

        // listen for errors with HTML5 audio (http://dev.w3.org/html5/spec-author-view/spec.html#mediaerror)
        newNode.addEventListener('error', function () {
          if (newNode.error && newNode.error.code === 4) {
            HowlerGlobal.noAudio = true;
          }

          self.on('loaderror', {type: newNode.error ? newNode.error.code : 0});
        }, false);

        self._audioNode.push(newNode);

        // setup the new audio node
        newNode.src = url;
        newNode._pos = 0;
        newNode.preload = 'auto';
        newNode.volume = (Howler._muted) ? 0 : self._volume * Howler.volume();

        // setup the event listener to start playing the sound
        // as soon as it has buffered enough
        var listener = function() {
          // round up the duration when using HTML5 Audio to account for the lower precision
          self._duration = Math.ceil(newNode.duration * 10) / 10;

          // setup a sprite if none is defined
          if (Object.getOwnPropertyNames(self._sprite).length === 0) {
            self._sprite = {_default: [0, self._duration * 1000]};
          }

          if (!self._loaded) {
            self._loaded = true;
            self.on('load');
          }

          if (self._autoplay) {
            self.play();
          }

          // clear the event listener
          newNode.removeEventListener('canplaythrough', listener, false);
        };
        newNode.addEventListener('canplaythrough', listener, false);
        newNode.load();
      }

      return self;
    },

    /**
     * Get/set the URLs to be pulled from to play in this source.
     * @param  {Array} urls  Arry of URLs to load from
     * @return {Howl}        Returns self or the current URLs
     */
    urls: function(urls) {
      var self = this;

      if (urls) {
        self.stop();
        self._urls = (typeof urls === 'string') ? [urls] : urls;
        self._loaded = false;
        self.load();

        return self;
      } else {
        return self._urls;
      }
    },

    /**
     * Play a sound from the current time (0 by default).
     * @param  {String}   sprite   (optional) Plays from the specified position in the sound sprite definition.
     * @param  {Function} callback (optional) Returns the unique playback id for this sound instance.
     * @return {Howl}
     */
    play: function(sprite, callback) {
      var self = this;

      // if no sprite was passed but a callback was, update the variables
      if (typeof sprite === 'function') {
        callback = sprite;
      }

      // use the default sprite if none is passed
      if (!sprite || typeof sprite === 'function') {
        sprite = '_default';
      }

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function() {
          self.play(sprite, callback);
        });

        return self;
      }

      // if the sprite doesn't exist, play nothing
      if (!self._sprite[sprite]) {
        if (typeof callback === 'function') callback();
        return self;
      }

      // get the node to playback
      self._inactiveNode(function(node) {
        // persist the sprite being played
        node._sprite = sprite;

        // determine where to start playing from
        var pos = (node._pos > 0) ? node._pos : self._sprite[sprite][0] / 1000;

        // determine how long to play for
        var duration = 0;
        if (self._webAudio) {
          duration = self._sprite[sprite][1] / 1000 - node._pos;
          if (node._pos > 0) {
            pos = self._sprite[sprite][0] / 1000 + pos;
          }
        } else {
          duration = self._sprite[sprite][1] / 1000 - (pos - self._sprite[sprite][0] / 1000);
        }

        // determine if this sound should be looped
        var loop = !!(self._loop || self._sprite[sprite][2]);

        // set timer to fire the 'onend' event
        var soundId = (typeof callback === 'string') ? callback : Math.round(Date.now() * Math.random()) + '',
          timerId;
        (function() {
          var data = {
            id: soundId,
            sprite: sprite,
            loop: loop
          };
          timerId = setTimeout(function() {
            // if looping, restart the track
            if (!self._webAudio && loop) {
              self.stop(data.id).play(sprite, data.id);
            }

            // set web audio node to paused at end
            if (self._webAudio && !loop) {
              self._nodeById(data.id).paused = true;
              self._nodeById(data.id)._pos = 0;

              // clear the end timer
              self._clearEndTimer(data.id);
            }

            // end the track if it is HTML audio and a sprite
            if (!self._webAudio && !loop) {
              self.stop(data.id);
            }

            // fire ended event
            self.on('end', soundId);
          }, (duration / self._rate) * 1000);

          // store the reference to the timer
          self._onendTimer.push({timer: timerId, id: data.id});
        })();

        if (self._webAudio) {
          var loopStart = self._sprite[sprite][0] / 1000,
            loopEnd = self._sprite[sprite][1] / 1000;

          // set the play id to this node and load into context
          node.id = soundId;
          node.paused = false;
          refreshBuffer(self, [loop, loopStart, loopEnd], soundId);
          self._playStart = ctx.currentTime;
          node.gain.value = self._volume;

          if (typeof node.bufferSource.start === 'undefined') {
            loop ? node.bufferSource.noteGrainOn(0, pos, 86400) : node.bufferSource.noteGrainOn(0, pos, duration);
          } else {
            loop ? node.bufferSource.start(0, pos, 86400) : node.bufferSource.start(0, pos, duration);
          }
        } else {
          if (node.readyState === 4 || !node.readyState && navigator.isCocoonJS) {
            node.readyState = 4;
            node.id = soundId;
            node.currentTime = pos;
            node.muted = Howler._muted || node.muted;
            node.volume = self._volume * Howler.volume();
            setTimeout(function() { node.play(); }, 0);
          } else {
            self._clearEndTimer(soundId);

            (function(){
              var sound = self,
                playSprite = sprite,
                fn = callback,
                newNode = node;
              var listener = function() {
                sound.play(playSprite, fn);

                // clear the event listener
                newNode.removeEventListener('canplaythrough', listener, false);
              };
              newNode.addEventListener('canplaythrough', listener, false);
            })();

            return self;
          }
        }

        // fire the play event and send the soundId back in the callback
        self.on('play');
        if (typeof callback === 'function') callback(soundId);

        return self;
      });

      return self;
    },

    /**
     * Pause playback and save the current position.
     * @param {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    pause: function(id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function() {
          self.pause(id);
        });

        return self;
      }

      // clear 'onend' timer
      self._clearEndTimer(id);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        activeNode._pos = self.pos(null, id);

        if (self._webAudio) {
          // make sure the sound has been created
          if (!activeNode.bufferSource || activeNode.paused) {
            return self;
          }

          activeNode.paused = true;
          if (typeof activeNode.bufferSource.stop === 'undefined') {
            activeNode.bufferSource.noteOff(0);
          } else {
            activeNode.bufferSource.stop(0);
          }
        } else {
          activeNode.pause();
        }
      }

      self.on('pause');

      return self;
    },

    /**
     * Stop playback and reset to start.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl}
     */
    stop: function(id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function() {
          self.stop(id);
        });

        return self;
      }

      // clear 'onend' timer
      self._clearEndTimer(id);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        activeNode._pos = 0;

        if (self._webAudio) {
          // make sure the sound has been created
          if (!activeNode.bufferSource || activeNode.paused) {
            return self;
          }

          activeNode.paused = true;

          if (typeof activeNode.bufferSource.stop === 'undefined') {
            activeNode.bufferSource.noteOff(0);
          } else {
            activeNode.bufferSource.stop(0);
          }
        } else if (!isNaN(activeNode.duration)) {
          activeNode.pause();
          activeNode.currentTime = 0;
        }
      }

      return self;
    },

    /**
     * Mute this sound.
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    mute: function(id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function() {
          self.mute(id);
        });

        return self;
      }

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (self._webAudio) {
          activeNode.gain.value = 0;
        } else {
          activeNode.muted = true;
        }
      }

      return self;
    },

    /**
     * Unmute this sound.
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl}
     */
    unmute: function(id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function() {
          self.unmute(id);
        });

        return self;
      }

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (self._webAudio) {
          activeNode.gain.value = self._volume;
        } else {
          activeNode.muted = false;
        }
      }

      return self;
    },

    /**
     * Get/set volume of this sound.
     * @param  {Float}  vol Volume from 0.0 to 1.0.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl/Float}     Returns self or current volume.
     */
    volume: function(vol, id) {
      var self = this;

      // make sure volume is a number
      vol = parseFloat(vol);

      if (vol >= 0 && vol <= 1) {
        self._volume = vol;

        // if the sound hasn't been loaded, add it to the event queue
        if (!self._loaded) {
          self.on('play', function() {
            self.volume(vol, id);
          });

          return self;
        }

        var activeNode = (id) ? self._nodeById(id) : self._activeNode();
        if (activeNode) {
          if (self._webAudio) {
            activeNode.gain.value = vol;
          } else {
            activeNode.volume = vol * Howler.volume();
          }
        }

        return self;
      } else {
        return self._volume;
      }
    },

    /**
     * Get/set whether to loop the sound.
     * @param  {Boolean} loop To loop or not to loop, that is the question.
     * @return {Howl/Boolean}      Returns self or current looping value.
     */
    loop: function(loop) {
      var self = this;

      if (typeof loop === 'boolean') {
        self._loop = loop;

        return self;
      } else {
        return self._loop;
      }
    },

    /**
     * Get/set sound sprite definition.
     * @param  {Object} sprite Example: {spriteName: [offset, duration, loop]}
     *                @param {Integer} offset   Where to begin playback in milliseconds
     *                @param {Integer} duration How long to play in milliseconds
     *                @param {Boolean} loop     (optional) Set true to loop this sprite
     * @return {Howl}        Returns current sprite sheet or self.
     */
    sprite: function(sprite) {
      var self = this;

      if (typeof sprite === 'object') {
        self._sprite = sprite;

        return self;
      } else {
        return self._sprite;
      }
    },

    /**
     * Get/set the position of playback.
     * @param  {Float}  pos The position to move current playback to.
     * @param  {String} id  (optional) The play instance ID.
     * @return {Howl/Float}      Returns self or current playback position.
     */
    pos: function(pos, id) {
      var self = this;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function() {
          self.pos(pos);
        });

        return typeof pos === 'number' ? self : self._pos || 0;
      }

      // make sure we are dealing with a number for pos
      pos = parseFloat(pos);

      var activeNode = (id) ? self._nodeById(id) : self._activeNode();
      if (activeNode) {
        if (pos >= 0) {
          self.pause(id);
          activeNode._pos = pos;
          self.play(activeNode._sprite, id);

          return self;
        } else {
          return self._webAudio ? activeNode._pos + (ctx.currentTime - self._playStart) : activeNode.currentTime;
        }
      } else if (pos >= 0) {
        return self;
      } else {
        // find the first inactive node to return the pos for
        for (var i=0; i<self._audioNode.length; i++) {
          if (self._audioNode[i].paused && self._audioNode[i].readyState === 4) {
            return (self._webAudio) ? self._audioNode[i]._pos : self._audioNode[i].currentTime;
          }
        }
      }
    },

    /**
     * Get/set the 3D position of the audio source.
     * The most common usage is to set the 'x' position
     * to affect the left/right ear panning. Setting any value higher than
     * 1.0 will begin to decrease the volume of the sound as it moves further away.
     * NOTE: This only works with Web Audio API, HTML5 Audio playback
     * will not be affected.
     * @param  {Float}  x  The x-position of the playback from -1000.0 to 1000.0
     * @param  {Float}  y  The y-position of the playback from -1000.0 to 1000.0
     * @param  {Float}  z  The z-position of the playback from -1000.0 to 1000.0
     * @param  {String} id (optional) The play instance ID.
     * @return {Howl/Array}   Returns self or the current 3D position: [x, y, z]
     */
    pos3d: function(x, y, z, id) {
      var self = this;

      // set a default for the optional 'y' & 'z'
      y = (typeof y === 'undefined' || !y) ? 0 : y;
      z = (typeof z === 'undefined' || !z) ? -0.5 : z;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('play', function() {
          self.pos3d(x, y, z, id);
        });

        return self;
      }

      if (x >= 0 || x < 0) {
        if (self._webAudio) {
          var activeNode = (id) ? self._nodeById(id) : self._activeNode();
          if (activeNode) {
            self._pos3d = [x, y, z];
            activeNode.panner.setPosition(x, y, z);
            activeNode.panner.panningModel = self._model || 'HRTF';
          }
        }
      } else {
        return self._pos3d;
      }

      return self;
    },

    /**
     * Fade a currently playing sound between two volumes.
     * @param  {Number}   from     The volume to fade from (0.0 to 1.0).
     * @param  {Number}   to       The volume to fade to (0.0 to 1.0).
     * @param  {Number}   len      Time in milliseconds to fade.
     * @param  {Function} callback (optional) Fired when the fade is complete.
     * @param  {String}   id       (optional) The play instance ID.
     * @return {Howl}
     */
    fade: function(from, to, len, callback, id) {
      var self = this,
        diff = Math.abs(from - to),
        dir = from > to ? 'down' : 'up',
        steps = diff / 0.01,
        stepTime = len / steps;

      // if the sound hasn't been loaded, add it to the event queue
      if (!self._loaded) {
        self.on('load', function() {
          self.fade(from, to, len, callback, id);
        });

        return self;
      }

      // set the volume to the start position
      self.volume(from, id);

      for (var i=1; i<=steps; i++) {
        (function() {
          var change = self._volume + (dir === 'up' ? 0.01 : -0.01) * i,
            vol = Math.round(1000 * change) / 1000,
            toVol = to;

          setTimeout(function() {
            self.volume(vol, id);

            if (vol === toVol) {
              if (callback) callback();
            }
          }, stepTime * i);
        })();
      }
    },

    /**
     * [DEPRECATED] Fade in the current sound.
     * @param  {Float}    to      Volume to fade to (0.0 to 1.0).
     * @param  {Number}   len     Time in milliseconds to fade.
     * @param  {Function} callback
     * @return {Howl}
     */
    fadeIn: function(to, len, callback) {
      return this.volume(0).play().fade(0, to, len, callback);
    },

    /**
     * [DEPRECATED] Fade out the current sound and pause when finished.
     * @param  {Float}    to       Volume to fade to (0.0 to 1.0).
     * @param  {Number}   len      Time in milliseconds to fade.
     * @param  {Function} callback
     * @param  {String}   id       (optional) The play instance ID.
     * @return {Howl}
     */
    fadeOut: function(to, len, callback, id) {
      var self = this;

      return self.fade(self._volume, to, len, function() {
        if (callback) callback();
        self.pause(id);

        // fire ended event
        self.on('end');
      }, id);
    },

    /**
     * Get an audio node by ID.
     * @return {Howl} Audio node.
     */
    _nodeById: function(id) {
      var self = this,
        node = self._audioNode[0];

      // find the node with this ID
      for (var i=0; i<self._audioNode.length; i++) {
        if (self._audioNode[i].id === id) {
          node = self._audioNode[i];
          break;
        }
      }

      return node;
    },

    /**
     * Get the first active audio node.
     * @return {Howl} Audio node.
     */
    _activeNode: function() {
      var self = this,
        node = null;

      // find the first playing node
      for (var i=0; i<self._audioNode.length; i++) {
        if (!self._audioNode[i].paused) {
          node = self._audioNode[i];
          break;
        }
      }

      // remove excess inactive nodes
      self._drainPool();

      return node;
    },

    /**
     * Get the first inactive audio node.
     * If there is none, create a new one and add it to the pool.
     * @param  {Function} callback Function to call when the audio node is ready.
     */
    _inactiveNode: function(callback) {
      var self = this,
        node = null;

      // find first inactive node to recycle
      for (var i=0; i<self._audioNode.length; i++) {
        if (self._audioNode[i].paused && self._audioNode[i].readyState === 4) {
          // send the node back for use by the new play instance
          callback(self._audioNode[i]);
          node = true;
          break;
        }
      }

      // remove excess inactive nodes
      self._drainPool();

      if (node) {
        return;
      }

      // create new node if there are no inactives
      var newNode;
      if (self._webAudio) {
        newNode = self._setupAudioNode();
        callback(newNode);
      } else {
        self.load();
        newNode = self._audioNode[self._audioNode.length - 1];

        // listen for the correct load event and fire the callback
        var listenerEvent = navigator.isCocoonJS ? 'canplaythrough' : 'loadedmetadata';
        var listener = function() {
          newNode.removeEventListener(listenerEvent, listener, false);
          callback(newNode);
        };
        newNode.addEventListener(listenerEvent, listener, false);
      }
    },

    /**
     * If there are more than 5 inactive audio nodes in the pool, clear out the rest.
     */
    _drainPool: function() {
      var self = this,
        inactive = 0,
        i;

      // count the number of inactive nodes
      for (i=0; i<self._audioNode.length; i++) {
        if (self._audioNode[i].paused) {
          inactive++;
        }
      }

      // remove excess inactive nodes
      for (i=self._audioNode.length-1; i>=0; i--) {
        if (inactive <= 5) {
          break;
        }

        if (self._audioNode[i].paused) {
          // disconnect the audio source if using Web Audio
          if (self._webAudio) {
            self._audioNode[i].disconnect(0);
          }

          inactive--;
          self._audioNode.splice(i, 1);
        }
      }
    },

    /**
     * Clear 'onend' timeout before it ends.
     * @param  {String} soundId  The play instance ID.
     */
    _clearEndTimer: function(soundId) {
      var self = this,
        index = -1;

      // loop through the timers to find the one associated with this sound
      for (var i=0; i<self._onendTimer.length; i++) {
        if (self._onendTimer[i].id === soundId) {
          index = i;
          break;
        }
      }

      var timer = self._onendTimer[index];
      if (timer) {
        clearTimeout(timer.timer);
        self._onendTimer.splice(index, 1);
      }
    },

    /**
     * Setup the gain node and panner for a Web Audio instance.
     * @return {Object} The new audio node.
     */
    _setupAudioNode: function() {
      var self = this,
        node = self._audioNode,
        index = self._audioNode.length;

      // create gain node
      node[index] = (typeof ctx.createGain === 'undefined') ? ctx.createGainNode() : ctx.createGain();
      node[index].gain.value = self._volume;
      node[index].paused = true;
      node[index]._pos = 0;
      node[index].readyState = 4;
      node[index].connect(masterGain);

      // create the panner
      node[index].panner = ctx.createPanner();
      node[index].panner.panningModel = self._model || 'equalpower';
      node[index].panner.setPosition(self._pos3d[0], self._pos3d[1], self._pos3d[2]);
      node[index].panner.connect(node[index]);

      return node[index];
    },

    /**
     * Call/set custom events.
     * @param  {String}   event Event type.
     * @param  {Function} fn    Function to call.
     * @return {Howl}
     */
    on: function(event, fn) {
      var self = this,
        events = self['_on' + event];

      if (typeof fn === 'function') {
        events.push(fn);
      } else {
        for (var i=0; i<events.length; i++) {
          if (fn) {
            events[i].call(self, fn);
          } else {
            events[i].call(self);
          }
        }
      }

      return self;
    },

    /**
     * Remove a custom event.
     * @param  {String}   event Event type.
     * @param  {Function} fn    Listener to remove.
     * @return {Howl}
     */
    off: function(event, fn) {
      var self = this,
        events = self['_on' + event];

      if (fn) {
        // loop through functions in the event for comparison
        for (var i=0; i<events.length; i++) {
          if (fn === events[i]) {
            events.splice(i, 1);
            break;
          }
        }
      } else {
        self['_on' + event] = [];
      }

      return self;
    },

    /**
     * Unload and destroy the current Howl object.
     * This will immediately stop all play instances attached to this sound.
     */
    unload: function() {
      var self = this;

      // stop playing any active nodes
      var nodes = self._audioNode;
      for (var i=0; i<self._audioNode.length; i++) {
        // stop the sound if it is currently playing
        if (!nodes[i].paused) {
          self.stop(nodes[i].id);
          self.on('end', nodes[i].id);
        }

        if (!self._webAudio) {
          // remove the source if using HTML5 Audio
          nodes[i].src = '';
        } else {
          // disconnect the output from the master gain
          nodes[i].disconnect(0);
        }
      }

      // make sure all timeouts are cleared
      for (i=0; i<self._onendTimer.length; i++) {
        clearTimeout(self._onendTimer[i].timer);
      }

      // remove the reference in the global Howler object
      var index = Howler._howls.indexOf(self);
      if (index !== null && index >= 0) {
        Howler._howls.splice(index, 1);
      }

      // delete this sound from the cache
      delete cache[self._src];
      self = null;
    }

  };

  // only define these functions when using WebAudio
  if (usingWebAudio) {

    /**
     * Buffer a sound from URL (or from cache) and decode to audio source (Web Audio API).
     * @param  {Object} obj The Howl object for the sound to load.
     * @param  {String} url The path to the sound file.
     */
    var loadBuffer = function(obj, url) {
      // check if the buffer has already been cached
      if (url in cache) {
        // set the duration from the cache
        obj._duration = cache[url].duration;

        // load the sound into this object
        loadSound(obj);
        return;
      }
      
      if (/^data:[^;]+;base64,/.test(url)) {
        // Decode base64 data-URIs because some browsers cannot load data-URIs with XMLHttpRequest.
        var data = atob(url.split(',')[1]);
        var dataView = new Uint8Array(data.length);
        for (var i=0; i<data.length; ++i) {
          dataView[i] = data.charCodeAt(i);
        }
        
        decodeAudioData(dataView.buffer, obj, url);
      } else {
        // load the buffer from the URL
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          decodeAudioData(xhr.response, obj, url);
        };
        xhr.onerror = function() {
          // if there is an error, switch the sound to HTML Audio
          if (obj._webAudio) {
            obj._buffer = true;
            obj._webAudio = false;
            obj._audioNode = [];
            delete obj._gainNode;
            delete cache[url];
            obj.load();
          }
        };
        try {
          xhr.send();
        } catch (e) {
          xhr.onerror();
        }
      }
    };

    /**
     * Decode audio data from an array buffer.
     * @param  {ArrayBuffer} arraybuffer The audio data.
     * @param  {Object} obj The Howl object for the sound to load.
     * @param  {String} url The path to the sound file.
     */
    var decodeAudioData = function(arraybuffer, obj, url) {
      // decode the buffer into an audio source
      ctx.decodeAudioData(
        arraybuffer,
        function(buffer) {
          if (buffer) {
            cache[url] = buffer;
            loadSound(obj, buffer);
          }
        },
        function(err) {
          obj.on('loaderror', err);
        }
      );
    };

    /**
     * Finishes loading the Web Audio API sound and fires the loaded event
     * @param  {Object}  obj    The Howl object for the sound to load.
     * @param  {Objecct} buffer The decoded buffer sound source.
     */
    var loadSound = function(obj, buffer) {
      // set the duration
      obj._duration = (buffer) ? buffer.duration : obj._duration;

      // setup a sprite if none is defined
      if (Object.getOwnPropertyNames(obj._sprite).length === 0) {
        obj._sprite = {_default: [0, obj._duration * 1000]};
      }

      // fire the loaded event
      if (!obj._loaded) {
        obj._loaded = true;
        obj.on('load');
      }

      if (obj._autoplay) {
        obj.play();
      }
    };

    /**
     * Load the sound back into the buffer source.
     * @param  {Object} obj   The sound to load.
     * @param  {Array}  loop  Loop boolean, pos, and duration.
     * @param  {String} id    (optional) The play instance ID.
     */
    var refreshBuffer = function(obj, loop, id) {
      // determine which node to connect to
      var node = obj._nodeById(id);

      // setup the buffer source for playback
      node.bufferSource = ctx.createBufferSource();
      node.bufferSource.buffer = cache[obj._src];
      node.bufferSource.connect(node.panner);
      node.bufferSource.loop = loop[0];
      if (loop[0]) {
        node.bufferSource.loopStart = loop[1];
        node.bufferSource.loopEnd = loop[1] + loop[2];
      }
      node.bufferSource.playbackRate.value = obj._rate;
    };

  }

  /**
   * Add support for AMD (Asynchronous Module Definition) libraries such as require.js.
   */
  if (typeof define === 'function' && define.amd) {
    define(function() {
      return {
        Howler: Howler,
        Howl: Howl
      };
    });
  }

  /**
   * Add support for CommonJS libraries such as browserify.
   */
  if (typeof exports !== 'undefined') {
    exports.Howler = Howler;
    exports.Howl = Howl;
  }

  // define globally in case AMD is not available or available but not used

  if (typeof window !== 'undefined') {
    window.Howler = Howler;
    window.Howl = Howl;
  }

})();
var __extends=this&&this.__extends||function(c,g){function f(){this.constructor=c}for(var b in g)g.hasOwnProperty(b)&&(c[b]=g[b]);c.prototype=null===g?Object.create(g):(f.prototype=g.prototype,new f)},core;
(function(c){var g=function(){function f(b){var a=this;this.canvasId=b;this.States={};this.HasFocus=!0;this.LastFrameTime=this.TimeDelta=0;this.StateDOMListeners=[];this.Canvas=document.getElementById(b);this.Context=this.Canvas.getContext("2d");this.RequestAnimationFrame=window.requestAnimationFrame.bind(window,this.OnUpdate.bind(this));window.onfocus=function(){return a.HasFocus=!0};window.onblur=function(){return a.HasFocus=!1}}f.prototype.AddState=function(b,a){this.States[b]=a};f.prototype.Play=
function(b){this.ActiveState&&this.CleanAfterState();if(this.ActiveState=this.States[b])this.ActiveState.Game=this,this.ActiveState.Start();else throw Error();};f.prototype.Start=function(){this.RequestAnimationFrame()};f.prototype.AddDOMEventListener=function(b,a,h){this.StateDOMListeners.push({element:b,type:a,listener:h});b.addEventListener(a,h)};f.prototype.RemoveDOMEventListener=function(b,a,h){for(var d=0,e=this.StateDOMListeners;d<e.length;d++){var f=e[d];if(f.element===b&&f.type===a&&f.listener===
h){c.RemoveElement(this.StateDOMListeners,f);b.removeEventListener(a,h);return}}throw Error("Couldn't find event listener.");};f.prototype.CleanAfterState=function(){audio.manager.StopAll();for(var b=this.StateDOMListeners.length-1;0<=b;--b){var a=this.StateDOMListeners[b];this.RemoveDOMEventListener(a.element,a.type,a.listener)}this.StateDOMListeners=[];this.ActiveState.Dispose&&this.ActiveState.Dispose()};f.prototype.OnUpdate=function(b){var a=b-this.LastFrameTime;if(!this.HasFocus&&50>a)return this.RequestAnimationFrame();
50<a&&(a=50);this.TimeDelta=a/1E3;this.ActiveState.Update(this.TimeDelta);this.ActiveState.Draw(this.Context);this.LastFrameTime=b;this.RequestAnimationFrame()};return f}();c.Game=g})(core||(core={}));
(function(c){var g=function(){function c(b,a){void 0===b&&(b=0);void 0===a&&(a=0);this.x=b;this.y=a}c.prototype.Set=function(b,a){this.x=b;this.y=a};c.prototype.Clone=function(b){return b?(b.x=this.x,b.y=this.y,b):new c(this.x,this.y)};c.prototype.toString=function(){return"[x: "+this.x+", y: "+this.y+"]"};return c}();c.Vector=g})(core||(core={}));
(function(c){(function(g){function f(a,b){void 0===a&&(a=0);void 0===b&&(b=0);return new c.Vector(a,b)}function b(a,b){return b?(b.x=a.x,b.y=a.y,b):f(a.x,a.y)}function a(a){return Math.sqrt(a.x*a.x+a.y*a.y)}g.Zero=new c.Vector;g.Tmp=new c.Vector;g.New=f;g.Clone=b;g.IsZero=function(a){return 0===a.x&&0===a.y};g.Add=function(a,b,e){e.x=a.x+b.x;e.y=a.y+b.y};g.Subtract=function(a,b,e){e.x=a.x-b.x;e.y=a.y-b.y};g.Multiply=function(a,b,e){e.x=a.x*b.x;e.y=a.y*b.y};g.Scale=function(a,b,e){void 0===e&&(e=a);
e.x=a.x*b;e.y=a.y*b};g.Length=a;g.LengthSqr=function(a){return a.x*a.x+a.y*a.y};g.Unit=function(h,b){void 0===b&&(b=h);var e=a(h);0<e&&(b.x=h.x/e,b.y=h.y/e)};g.Rotate=function(a,d,e){void 0===e&&(e=a);var c=Math.sin(d);d=Math.cos(d);a===e&&(a=b(a));e.x=a.x*d-a.y*c;e.y=a.x*c+a.y*d};g.Angle=function(a){return Math.atan2(a.y,a.x)};g.Invert=function(a,b){b.x=0<a.x?1/a.x:0;b.y=0<a.y?1/a.y:0};g.Dot=function(a,b){return a.x*b.x+a.y*b.y};g.Min=function(a,b,e){e.x=Math.min(a.x,b.x);e.y=Math.min(a.y,b.y)};
g.Max=function(a,b,e){e.x=Math.max(a.x,b.x);e.y=Math.max(a.y,b.y)}})(c.vector||(c.vector={}))})(core||(core={}));var vec=core.vector;
(function(c){var g=function(){function f(b,a,h,d){this.Position=c.vector.New(b,a);this.Size=c.vector.New(h,d);this.Anchor=c.vector.New(0,0);this.Scale=c.vector.New(1,1);this.Rotation=0;this.Alpha=1;this.Visible=!0}f.prototype.Draw=function(b){this.Visible&&(b.save(),b.globalAlpha*=this.Alpha,b.translate(this.Position.x,this.Position.y),b.scale(this.Scale.x,this.Scale.y),b.rotate(this.Rotation),c.vector.IsZero(this.Anchor)||b.translate(-this.Anchor.x*this.Size.x,-this.Anchor.y*this.Size.y),this.CachedObject?
this.DrawCache(b):this.DrawSelf(b),b.restore())};f.prototype.DrawCache=function(b){b.drawImage(this.CachedObject,0,0,this.Size.x,this.Size.y)};f.prototype.ToLocal=function(b,a){var h,d=c.vector.Tmp;a?(c.vector.Clone(b,a),h=a):h=c.vector.Clone(b);this.Parent&&this.Parent.ToLocal(b,h);c.vector.Subtract(h,this.Position,h);c.vector.Clone(this.Scale,d);c.vector.Invert(d,d);c.vector.Multiply(h,d,h);c.vector.Rotate(h,-this.Rotation,h);c.vector.Clone(this.Anchor,d);c.vector.Multiply(d,this.Size,d);c.vector.Add(h,
d,h);if(!a)return h};f.prototype.ToGlobal=function(b,a){var h=a?a:c.vector.New(),d=c.vector.Tmp;c.vector.Clone(this.Anchor,d);c.vector.Multiply(d,this.Size,d);c.vector.Subtract(b,d,h);c.vector.Rotate(h,this.Rotation);c.vector.Multiply(h,this.Scale,h);c.vector.Add(h,this.Position,h);this.Parent&&this.Parent.ToGlobal(h,h);if(!a)return h};f.prototype.IsPointInside=function(b,a,h){void 0===a&&(a=!0);void 0===h&&(h=c.vector.Zero);b=a?this.ToLocal(b):c.vector.Clone(b);a=b.y>-h.y&&b.y<this.Size.y+h.y;return b.x>
-h.x&&b.x<this.Size.x+h.x&&a};f.prototype.IsVisible=function(){return this.Parent?this.Visible&&this.Parent.IsVisible():this.Visible};f.prototype.RemoveFromParent=function(){this.Parent.RemoveChild(this)};f.prototype.Cache=function(b,a,h){void 0===b&&(b=1);var d;a&&(d=f.GlobalCache[a])?this.CachedObject=d:(d=this.CachedObject=document.createElement("canvas"),d.width=this.Size.x*b,d.height=this.Size.y*b,a&&(f.GlobalCache[a]=d),a=d.getContext("2d"),a.scale(b,b),h&&h(a),this.DrawSelf(a))};f.GlobalCache=
{};return f}();c.DisplayObject=g;g=function(c){function b(a,b,d,e){void 0===a&&(a=0);void 0===b&&(b=0);void 0===d&&(d=0);void 0===e&&(e=0);c.call(this,a,b,d,e);this.Children=[]}__extends(b,c);b.prototype.AddChild=function(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];for(b=0;b<a.length;b++){var d=a[b];if(d.Parent)throw Error("Child has parent");d.Parent=this;this.Children.push(d)}};b.prototype.RemoveChild=function(a){var b=this.Children.indexOf(a);if(0<=b)a.Parent=void 0,this.Children.splice(b,
1);else throw Error("Child doesn't exist in this layer");};b.prototype.DrawSelf=function(a){for(var b=0,d=this.Children;b<d.length;b++)d[b].Draw(a)};return b}(g);c.Layer=g})(core||(core={}));
(function(c){function g(a,b,e){var f=e.pageX,g=e.pageY,l=e.target.getBoundingClientRect(),f=new c.Vector(f-l.left,g-l.top);a.call(b,f,e)}function f(a,d,e){var c=0,f=0;if("touchend"!==e.type){var c=e.targetTouches[0].pageX,f=e.targetTouches[0].pageY,g=e.target.getBoundingClientRect();b.Set(c-g.left,f-g.top)}a.call(d,b.Clone(),e);e.preventDefault()}var b=new c.Vector;c.MakeMouseEventTranslator=function(a,b){return g.bind(null,a,b)};c.MakeTouchEventTranslator=function(a,b){return f.bind(null,a,b)};var a=
function(){function a(){this.OnDownListeners=[];this.OnUpListeners=[]}a.prototype.WhenPointerDown=function(a,b){this.OnDownListeners.push({object:a,action:b});return this};a.prototype.WhenPointerUp=function(a,b){this.OnUpListeners.push({object:a,action:b});return this};a.prototype.WhenPointerClick=function(a,b,h){for(var c=[],f=3;f<arguments.length;f++)c[f-3]=arguments[f];var g=0;this.OnDownListeners.push({object:a,action:function(){return g=Date.now()}});this.OnUpListeners.push({object:a,action:function(){450>
Date.now()-g&&b.apply(h,c)}});return this};a.prototype.OnPointerDown=function(a){this.HandleEvent(this.OnDownListeners,a)};a.prototype.OnPointerMove=function(a){};a.prototype.OnPointerUp=function(a){this.HandleEvent(this.OnUpListeners,a)};a.prototype.HandleEvent=function(a,b){for(var h=0;h<a.length;h++){var c=a[h],f=c.object,c=c.action;f.IsVisible()&&f.IsPointInside(b)&&c()}};a.prototype.Update=function(){};return a}();c.GenericInputController=a})(core||(core={}));
(function(c){function g(b){return b.slice(0)}c.RemoveElement=function(b,a){var h=b.indexOf(a);if(0<=h)return b.splice(h,1);throw Error();};c.TryRemoveElement=function(b,a){var h=b.indexOf(a);if(0<=h)return b.splice(h,1)};c.Last=function(b){return b[b.length-1]};c.Clone=g;c.ShuffleArray=function(b){b=g(b);for(var a=b.length-1;0<a;a--){var h=Math.floor(Math.random()*(a+1)),d=b[a];b[a]=b[h];b[h]=d}return b};c.IsPointInside=function(b,a){var h=c.vector.Tmp;c.vector.Clone(a.Anchor,h);c.vector.Multiply(h,
a.Size,h);c.vector.Subtract(a.Position,h,h);return b.x>h.x&&b.x<h.x+a.Size.x&&b.y>h.y&&b.y<a.Size.y+h.y};var f=function(){function b(a){void 0===a&&(a=60);this.ProbeNum=a;this.ProbeIdx=0;this.Probes=Array(a);for(var b=0;b<a;++b)this.Probes[b]=0}b.prototype.Update=function(a){this.Probes[this.ProbeIdx++%this.ProbeNum]=a};b.prototype.GetFPS=function(){return 1/this.GetAvgFrameTime()};b.prototype.GetAvgFrameTime=function(){for(var a=0,b=0;b<this.ProbeNum;++b)a+=this.Probes[b];return a/this.ProbeNum};
return b}();c.FPSMeter=f;f=function(){function b(){this.Callbacks=[]}b.prototype.Add=function(a,b){this.Callbacks.push([a,b,!1]);return this};b.prototype.AddOnce=function(a,b){this.Callbacks.push([a,b,!0]);return this};b.prototype.CallAll=function(){for(var a=[],b=0;b<arguments.length;b++)a[b-0]=arguments[b];for(b=this.Callbacks.length-1;0<=b;--b){var d=this.Callbacks[b],e=d[2];d[0].apply(d[1],a);e&&this.Callbacks.splice(b,1)}};return b}();c.CallbackSet=f})(core||(core={}));
(function(c){var g=function(){function b(a,b){this.Target=a;this.Manager=b;this.ElapsedTime=0;this.TweenedProperties=[];this.Duration=0;this.OnDoneCallbacks=new c.CallbackSet;this.OnStart=new c.CallbackSet;this.OnUpdateCallbacks=new c.CallbackSet;this.PlayReversed=this.IsLooping=this.IsDone=!1}b.prototype.Start=function(){var a=this.GetRoot();a.Manager&&(a.IsPlaying()&&a.Manager.StopTween(a),a.Manager.StartTween(a));for(;a;)a.IsDone=!1,a.ElapsedTime=0,a=a.Next;return this};b.prototype.Stop=function(a){void 0===
a&&(a=!0);var b=this.GetRoot();b.Manager&&b.IsPlaying()&&(a?b.Update(1E10):b.Manager.StopTween(b))};b.prototype.To=function(a,b,d){void 0===b&&(b=1);void 0===d&&(d=f.Linear);c.Assert(0<b,"Duration has be greater than 0.");this.TweenedProperties=[];for(var e in a)this.TweenedProperties.push({key:e,start:0,change:0,end:a[e]});this.Duration=b;this.Easeing=d;return this};b.prototype.WhenDone=function(a){this.OnDoneCallbacks.Add(a);return this};b.prototype.OnUpdate=function(a){this.OnUpdateCallbacks.Add(a);
return this};b.prototype.Then=function(a){void 0===a&&(a=this.Target);this.Next=a=new b(a,this.Manager);a.Prev=this;return a};b.prototype.Parallel=function(a,b){this.OnStart.Add(function(){if(this.Manager)b(this.Manager.New(a).Start());else throw Error();},this);return this};b.prototype.Delay=function(a){return this.To({},a)};b.prototype.Reverse=function(){for(var a=this;a;a=a.Prev)a.PlayReversed=!a.PlayReversed;return this};b.prototype.Loop=function(){this.IsLooping=!0;return this};b.prototype.Update=
function(a){for(var b=this;b;)if(0===b.ElapsedTime&&b.InitProperties(),b.ElapsedTime+=a,b.ElapsedTime<=b.Duration){b.UpdateProperties(b.ElapsedTime);break}else b.IsDone||(b.IsDone=!0,b.UpdateProperties(b.Duration),b.OnDoneCallbacks.CallAll(b.Target),!b.Manager||b.Next||b.IsLooping||b.Manager.StopTween(b.GetRoot()),b.IsLooping&&b.Start()),b=b.Next};b.prototype.GetRoot=function(){for(var a=this;a.Prev;)a=a.Prev;return a};b.prototype.IsPlaying=function(){if(this.Manager)return 0<=this.Manager.Tweens.indexOf(this.GetRoot());
throw Error();};b.prototype.UpdateProperties=function(a){for(var b=0,d=this.TweenedProperties;b<d.length;b++){var e=d[b];this.Target[e.key]=this.Easeing(a,e.start,e.change,this.Duration)}this.OnUpdateCallbacks.CallAll(this.Target,a/this.Duration)};b.prototype.InitProperties=function(){for(var a=0,b=this.TweenedProperties;a<b.length;a++){var d=b[a];if(this.PlayReversed){var e=d.start||this.Target[d.key];d.start=d.end;d.end=e}else d.start=this.Target[d.key];d.change=d.end-d.start}this.OnStart.CallAll()};
return b}();c.Tween=g;var f;(function(b){b.Linear=function(a,b,d,e){return d*a/e+b};b.CubicOut=function(a,b,d,e){a/=e;a--;return d*(a*a*a+1)+b};b.CubicIn=function(a,b,d,e){a/=e;return d*a*a*a+b};b.SinusoidalInOut=function(a,b,d,e){return-d/2*(Math.cos(Math.PI*a/e)-1)+b}})(f=c.easing||(c.easing={}));g=function(){function b(){this.Tweens=[]}b.prototype.New=function(a){return new c.Tween(a,this)};b.prototype.StartTween=function(a){this.Tweens.push(a)};b.prototype.StopTween=function(a){c.RemoveElement(this.Tweens,
a)};b.prototype.TweenPlaying=function(){return this.Tweens.some(function(a){return a.IsPlaying()})};b.prototype.Update=function(a){for(var b=0,d=this.Tweens;b<d.length;b++)d[b].Update(a)};b.prototype.StopAll=function(a){void 0===a&&(a=!0);if(a)for(a=this.Tweens.length-1;0<=a;--a)this.Tweens[a].Stop(!0);else this.Tweens=[]};return b}();c.TweenManager=g})(core||(core={}));
(function(c){var g=function(){function b(a,b,d,e,c,f){void 0===e&&(e=0);void 0===c&&(c=1);this.Callback=a;this.Ctx=b;this.Delay=d;this.Interval=e;this.CallLimit=c;this.Args=f;this.CallCount=this.ElapsedTime=0}b.prototype.Update=function(a){this.ElapsedTime+=a;if(this.ElapsedTime>this.Delay){if(0<this.CallLimit&&this.CallCount>this.CallLimit-1)return!0;this.ElapsedTime-this.Delay>this.Interval*this.CallCount&&(this.CallCount+=1,this.Callback.apply(this.Ctx,[this.CallCount].concat(this.Args)))}return!1};
b.prototype.Stop=function(){if(this.Manager)this.Manager.Remove(this);else throw Error("This timer doesn't have manager.");};return b}();c.Timer=g;var f=function(){function b(){this.Timers=[];this.ThrottledCallback=[]}b.prototype.Delay=function(a,b,d){for(var e=[],c=3;c<arguments.length;c++)e[c-3]=arguments[c];e=new g(b,d,a,void 0,1,e);e.Manager=this;this.Timers.push(e);return e};b.prototype.Repeat=function(a,b,d,c,f){void 0===c&&(c=0);void 0===f&&(f=0);for(var k=[],l=5;l<arguments.length;l++)k[l-
5]=arguments[l];k=new g(b,d,f,a,c,k);k.Manager=this;this.Timers.push(k);return k};b.prototype.Throttle=function(a,b,d){for(var e=this,f=[],g=3;g<arguments.length;g++)f[g-3]=arguments[g];0>this.ThrottledCallback.indexOf(b)&&(b.apply(d,f),this.ThrottledCallback.push(b),this.Delay(a,function(){return c.RemoveElement(e.ThrottledCallback,b)}))};b.prototype.Update=function(a){for(var b=this.Timers.length-1;0<=b;--b)this.Timers[b].Update(a)&&this.Timers.splice(b,1)};b.prototype.Count=function(){return this.Timers.length};
b.prototype.RemoveAll=function(){for(var a=0,b=this.Timers;a<b.length;a++)b[a].Manager=void 0;this.Timers=[]};b.prototype.Remove=function(a){c.RemoveElement(this.Timers,a);a.Manager=void 0};return b}();c.TimersManager=f})(core||(core={}));
(function(c){(function(g){var f=c.vector;g.Clamp=function(b,a,h){return Math.max(Math.min(b,h),a)};g.DistanceP2L=function(b,a,h){var d=f.New(),c=f.New();f.Subtract(h,a,d);f.Subtract(b,a,c);h=f.Dot(c,d)/f.LengthSqr(d);f.Scale(d,h);f.Add(d,a,d);f.Subtract(b,d,d);return f.Length(d)}})(c.math||(c.math={}))})(core||(core={}));var state;
(function(c){var g=function(){function c(){this.DefaultSize=new core.Vector(64,64)}c.prototype.Start=function(){var b=this;this.Stage=new core.Layer(0,0,this.DefaultSize.x,this.DefaultSize.y);this.Tweens=new core.TweenManager;this.Timers=new core.TimersManager;this.FPSMeter=new core.FPSMeter(60);this.FPSText=new gfx.AAText(10,10,"FPS");this.FPSText.SetSize(10);this.FPSText.Visible=!1;this.Game.AddDOMEventListener(window,"resize",function(a){return b.OnResize()})};c.prototype.Update=function(b){this.Timers.Update(b);
this.Tweens.Update(b);this.FPSText.Visible&&(this.FPSMeter.Update(b),this.FPSText.SetText(this.FPSMeter.GetFPS().toFixed(1)))};c.prototype.Draw=function(b){b.clearRect(0,0,b.canvas.width,b.canvas.height);this.Stage.Draw(b);this.FPSText.Draw(b)};c.prototype.OnPointerDown=function(b){this.InputController.OnPointerDown(b)};c.prototype.OnPointerMove=function(b){this.InputController.OnPointerMove(b)};c.prototype.OnPointerUp=function(b){this.InputController.OnPointerUp(b)};c.prototype.OnKeyDown=function(b){};
c.prototype.OnKeyUp=function(b){};c.prototype.OnResize=function(){var b=Math.min(window.innerWidth/this.DefaultSize.x,window.innerHeight/this.DefaultSize.y);this.Stage.Scale.Set(b,b);this.Stage.Size.Set(this.DefaultSize.x,this.DefaultSize.y);var a=Math.floor(this.Stage.Size.x*b);this.Game.Canvas.width!==a&&(this.Game.Canvas.width=a);b=Math.floor(this.Stage.Size.y*b);this.Game.Canvas.height!==b&&(this.Game.Canvas.height=b);this.Game.Context.imageSmoothingEnabled=!1;this.Game.Context.mozImageSmoothingEnabled=
!1;this.Game.Context.webkitImageSmoothingEnabled=!1;this.Game.Context.msImageSmoothingEnabled=!1};c.prototype.ShowFps=function(){this.FPSText.Visible=!0};c.prototype.DimScreen=function(b,a){void 0===b&&(b=!1);void 0===a&&(a=2);b&&(this.Stage.Alpha=1-this.Stage.Alpha);return this.Tweens.New(this.Stage).To({Alpha:b?1:0},a).Start()};c.prototype.ShakeScreen=function(b,a){void 0===a&&(a=3);return this.Tweens.New(this.Stage.Position).OnUpdate(function(b,d){d=Math.sin(d*Math.PI);b.Set(core.Random(-a,a)*
d|0,core.Random(-a,a)*d|0)}).Delay(b).Then().To({x:0,y:0},.01).Start()};c.prototype.ListenForMouseInput=function(){if(!this.InputController)throw Error();this.Game.AddDOMEventListener(this.Game.Canvas,"mousemove",core.MakeMouseEventTranslator(this.OnPointerMove,this));this.Game.AddDOMEventListener(this.Game.Canvas,"mousedown",core.MakeMouseEventTranslator(this.OnPointerDown,this));this.Game.AddDOMEventListener(this.Game.Canvas,"mouseup",core.MakeMouseEventTranslator(this.OnPointerUp,this))};c.prototype.ListenForTouchInput=
function(){if(!this.InputController)throw Error();this.Game.AddDOMEventListener(this.Game.Canvas,"touchmove",core.MakeTouchEventTranslator(this.OnPointerMove,this));this.Game.AddDOMEventListener(this.Game.Canvas,"touchstart",core.MakeTouchEventTranslator(this.OnPointerDown,this));this.Game.AddDOMEventListener(this.Game.Canvas,"touchend",core.MakeTouchEventTranslator(this.OnPointerUp,this))};c.prototype.ListenForKeyboard=function(){var b=this;if(!this.InputController)throw Error();this.Game.AddDOMEventListener(window,
"keydown",function(a){b.OnKeyDown(a.keyCode);a.preventDefault()});this.Game.AddDOMEventListener(window,"keyup",function(a){b.OnKeyUp(a.keyCode);a.preventDefault()})};return c}();c.AbstractState=g})(state||(state={}));var gfx;
(function(c){var g=function(){function c(b,a,h){void 0===h&&(h="white");this.Font=b;this.Size=a;this.Color=h;this.CacheMap={};this.DotSizePx=a/b.Char.Height;this.CharWidthPx=b.Char.Width*this.DotSizePx;this.Cache=document.createElement("canvas");this.Cache.width=Object.keys(b.Letter).length*Math.ceil(this.CharWidthPx+this.DotSizePx);this.Cache.height=a;console.log("FontCache Size",this.Size,"DotPx",this.DotSizePx,"Color",this.Color);this.Render()}c.prototype.DrawLetter=function(b,a,c,d,e,f){void 0===
c&&(c=0);void 0===d&&(d=0);void 0===e&&(e=1);void 0===f&&(f=e);b.drawImage(this.Cache,this.CacheMap[a],0,this.CharWidthPx,this.Size,c,d,this.CharWidthPx*e,this.Size*f)};c.prototype.Render=function(){var b=this.Cache.getContext("2d"),a=0;b.fillStyle=this.Color;for(var c in this.Font.Letter){this.RenderLetter(b,c);this.CacheMap[c]=a;var d=Math.ceil(this.CharWidthPx+this.DotSizePx),a=a+d;b.translate(d,0)}};c.prototype.RenderLetter=function(b,a){for(var c=this.Font,d=this.DotSizePx,e=0;e<c.Char.Width;++e)for(var f=
0;f<c.Char.Height;++f)c.Letter[a][f*c.Char.Width+e]&&b.fillRect(e*d,f*d,d,d)};return c}();c.FontChache=g})(gfx||(gfx={}));
(function(c){c.PixelFont={Char:{Width:3,Height:5},Letter:{"+":[0,0,0,0,1,0,1,1,1,0,1,0,0,0,0],"-":[0,0,0,0,0,0,1,1,1,0,0,0,0,0,0],_:[0,0,0,0,0,0,0,0,0,0,0,0,1,1,1],".":[0,0,0,0,0,0,0,0,0,0,0,0,0,1,0],",":[0,0,0,0,0,0,0,0,0,0,1,0,1,0,0],":":[0,0,0,0,1,0,0,0,0,0,1,0,0,0,0],"?":[1,1,0,0,0,1,0,1,1,0,0,0,0,1,0],"!":[0,1,0,0,1,0,0,1,0,0,0,0,0,1,0],"\u2665":[1,0,1,1,1,1,1,1,1,0,1,0,0,0,0],0:[1,1,1,1,0,1,1,0,1,1,0,1,1,1,1],1:[0,1,0,1,1,0,0,1,0,0,1,0,0,1,0],2:[1,1,1,0,0,1,1,1,1,1,0,0,1,1,1],3:[1,1,1,0,0,1,
0,1,1,0,0,1,1,1,1],4:[1,0,1,1,0,1,1,1,1,0,0,1,0,0,1],5:[1,1,1,1,0,0,1,1,1,0,0,1,1,1,0],6:[0,1,1,1,0,0,1,1,1,1,0,1,1,1,1],7:[1,1,1,0,0,1,0,1,0,0,1,0,0,1,0],8:[1,1,1,1,0,1,1,1,1,1,0,1,1,1,1],9:[1,1,1,1,0,1,1,1,1,0,0,1,1,1,0],A:[0,1,0,1,0,1,1,1,1,1,0,1,1,0,1],B:[1,1,0,1,0,1,1,1,0,1,0,1,1,1,0],C:[1,1,1,1,0,0,1,0,0,1,0,0,1,1,1],D:[1,1,0,1,0,1,1,0,1,1,0,1,1,1,0],E:[1,1,1,1,0,0,1,1,0,1,0,0,1,1,1],F:[1,1,1,1,0,0,1,1,0,1,0,0,1,0,0],G:[1,1,1,1,0,0,1,0,1,1,0,1,1,1,1],H:[1,0,1,1,0,1,1,1,1,1,0,1,1,0,1],I:[0,1,
0,0,1,0,0,1,0,0,1,0,0,1,0],J:[1,1,1,0,1,0,0,1,0,0,1,0,1,0,0],K:[1,0,1,1,0,1,1,1,0,1,0,1,1,0,1],L:[1,0,0,1,0,0,1,0,0,1,0,0,1,1,1],N:[0,0,1,1,0,1,1,1,1,1,0,1,1,0,0],M:[1,0,1,1,1,1,1,0,1,1,0,1,1,0,1],O:[1,1,1,1,0,1,1,0,1,1,0,1,1,1,1],P:[1,1,1,1,0,1,1,1,1,1,0,0,1,0,0],Q:[1,1,1,1,0,1,1,0,1,1,1,0,0,0,1],R:[1,1,0,1,0,1,1,1,0,1,0,1,1,0,1],S:[1,1,1,1,0,0,1,1,0,0,0,1,1,1,1],T:[1,1,1,0,1,0,0,1,0,0,1,0,0,1,0],U:[1,0,1,1,0,1,1,0,1,1,0,1,1,1,1],W:[1,0,1,1,0,1,1,0,1,1,1,1,1,0,1],V:[1,0,1,1,0,1,1,0,1,1,0,1,0,1,0],
X:[1,0,1,1,0,1,0,1,0,1,0,1,1,0,1],Y:[1,0,1,1,0,1,1,0,1,0,1,0,0,1,0],Z:[1,1,1,0,0,1,0,1,1,1,0,0,1,1,1]},Cache:{}}})(gfx||(gfx={}));
(function(c){var g=function(f){function b(a,b,d,e){void 0===d&&(d="");void 0===e&&(e={Size:20,Color:"white",Font:c.PixelFont});f.call(this,a,b,0,0);this.Text=d;this.Style=e;this.SetColor(e.Color);this.SetSize(e.Size)}__extends(b,f);b.prototype.SetColor=function(a){this.FontRenderer=this.Style.Font.Cache[a]?this.Style.Font.Cache[a]:this.Style.Font.Cache[a]=new c.FontChache(this.Style.Font,20,a)};b.prototype.SetText=function(a){this.Text=a;this.UpdateSize()};b.prototype.SetSize=function(a){this.Style.Size=
a;this.DotSizePx=a/this.Style.Font.Char.Height;this.CharWidthPx=this.Style.Font.Char.Width*this.DotSizePx;this.UpdateSize()};b.prototype.DrawSelf=function(a){for(var b=this.Style.Size/this.FontRenderer.Size,c=0;c<this.Text.length;++c){var e=this.Text[c];" "!==e&&this.FontRenderer.DrawLetter(a,e,0,0,b);a.translate(this.CharWidthPx+this.DotSizePx,0)}};b.prototype.UpdateSize=function(){this.Size.x=(this.CharWidthPx+this.DotSizePx)*this.Text.length-this.DotSizePx;this.Size.y=this.Style.Size};return b}(core.DisplayObject);
c.Text=g;g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Draw=function(a){if(this.Visible){var b=this.Style.Size/this.FontRenderer.Size,c=this.Position,e=c.x,c=c.y,e=e-this.Size.x*this.Anchor.x*this.Scale.x,c=c-this.Size.y*this.Anchor.y*this.Scale.y,f=a.globalAlpha;a.globalAlpha*=this.Alpha;for(var g=0;g<this.Text.length;++g){var l=this.Text[g];" "!==l&&this.FontRenderer.DrawLetter(a,l,e,c,b*this.Scale.x,b*this.Scale.y);e+=(this.CharWidthPx+this.DotSizePx)*this.Scale.x}a.globalAlpha=
f}};b.prototype.Cache=function(){throw Error("Use gfx.Text if you want cache");};return b}(g);c.AAText=g})(gfx||(gfx={}));(function(c){c.ImageLoader={load:function(c){return new Promise(function(f,b){var a=new Image;a.onload=function(){return f(a)};a.onerror=function(a){return b(a)};a.src=c})}}})(core||(core={}));
(function(c){var g=function(){function f(b,a,h,d){this.Position=new c.Vector(b,a);this.Size=new c.Vector(h,d)}f.prototype.Clone=function(b){b=b||new f(0,0,0,0);this.Position.Clone(b.Position);this.Size.Clone(b.Size);return b};return f}();c.Rect=g})(core||(core={}));
(function(c){var g=function(c){function b(a,h,d,e){c.call(this,a,h,0,0);if(this.Image=b.ImageCache[d])this.SourceRect=e?e.Clone():new core.Rect(0,0,this.Image.width,this.Image.height),this.SourceRect.Size.Clone(this.Size);else throw Error("Couldn't find "+d+" in cache");}__extends(b,c);b.prototype.DrawSelf=function(a){this.Image?a.drawImage(this.Image,this.SourceRect.Position.x,this.SourceRect.Position.y,this.SourceRect.Size.x,this.SourceRect.Size.y,0,0,this.Size.x,this.Size.y):(a.fillStyle="black",
a.strokeStyle="red",a.rect(0,0,this.Size.x,this.Size.y),a.fill(),a.stroke())};b.Load=function(){for(var a=[],c=0;c<arguments.length;c++)a[c-0]=arguments[c];return Promise.all(a.map(function(a){var c=a[0];return core.ImageLoader.load(a[1]).then(function(a){return b.ImageCache[c]=a})}))};b.ImageCache={};return b}(core.DisplayObject);c.Sprite=g})(gfx||(gfx={}));(function(c){c.Assert=function(c,f){if(!c)throw Error("Assertion failed. "+(f||""));}})(core||(core={}));
(function(c){var g=function(){function f(b,a,h){void 0===h&&(h=new core.Vector);this.ImageId=b;this.CellSize=a;this.Offset=h;this.ImageSize=new core.Vector;this.GridSize=new core.Vector;if(a=c.Sprite.ImageCache[b])this.ImageSize.Set(a.width,a.height),this.UpdateGridSize();else throw Error("Tileset with given id "+b+" doesn't exsit.");}f.prototype.GetSprite=function(b){core.Assert(1<=b,"Sprites id have to be greater than 0.");return new c.Sprite(0,0,this.ImageId,this.GetSourceRect(b))};f.prototype.GetSourceRect=
function(b){if(!(1>b)){--b;var a=b%this.GridSize.x,c=Math.floor(b/this.GridSize.x);core.Assert(a<this.GridSize.x&&c<this.GridSize.y,"Sprite id:"+b+" is out of bounds.");return new core.Rect(a*this.CellSize.x+this.Offset.x,c*this.CellSize.y+this.Offset.y,this.CellSize.x,this.CellSize.y)}};f.prototype.UpdateGridSize=function(){var b=this.ImageSize.x/this.CellSize.x,a=this.ImageSize.y/this.CellSize.y;core.Assert(0===b%1,"Width of image doesn't match grid size.");core.Assert(0===a%1,"Height of image doesn't match grid size.");
this.GridSize.Set(b,a)};return f}();c.SpriteSheet=g})(gfx||(gfx={}));
(function(c){var g=function(c){function b(a,b,d,e,g){void 0===g&&(g=d.CellSize);c.call(this,a,b);this.TileSet=d;this.Data=e;this.CellSize=g;this.GridSize=new core.Vector;this.BuildLayer()}__extends(b,c);b.prototype.BuildLayer=function(){var a=this;core.Assert(0<this.Data.length,"Layer data can't be null.");core.Assert(this.Data.every(function(b){return b.length===a.Data[0].length}),"Each row has to have the same length.");this.Data.forEach(function(b,c){b.forEach(function(b,h){if(0!=b){var f=a.TileSet.GetSprite(b);
f.Position.Set(h*a.CellSize.x,c*a.CellSize.y);a.AddChild(f)}})});this.GridSize.Set(this.Data[0].length,this.Data.length);core.vector.Multiply(this.GridSize,this.CellSize,this.Size)};return b}(core.Layer);c.TileLayer=g})(gfx||(gfx={}));var game;
(function(c){c.assets={HERO_FACE_UP:1,HERO_FACE_LEFT:2,HERO_FACE_RIGHT:3,HERO_FALLING:4,HERO_LANDING:[5,6,7,8],FLOATING_TILE_FRAMES:[1,2,3,4,5],SMALL_SHADOW:31,COW_BELL:[32],HEART:[35,36],ATTACK_BONUS:34,SWORD:[71,72,73,74,75,76,77,78],PLAYER_TORCH:[81,82,83,84,85,86,87,88,89],GREEN_TORCH_FRAMES:[41,42,43,44],HEART_FRAME:37,HEART_FILL:38,RED_DEMON_FRAMES:[51,52],BLUE_DEMON_FRAMES:[53,54,55,56],GREEN_DEMON_FRAMES:[57,58,59,60],PURPLE_DEMON_FRAMES:[244,245,246,247],DARK_DEMON_FRAMES:[261,261,261,261,
261,261,262,263,264,265,266,267,268,269],FIGHT_DEMON_HEALTHBAR:117,FIGHT_DEMON_MOUTH:{RED:[91,94],BLUE:[124,127],GREEN:[154,157],PURPLE:[184,187],DARK:[214,217]},FIGHT_LIGHT_CONE:97,MAIN_MENU_SCENE:[121,151,181,211],INTRO_SCENE:[281,284,311,314,341,344,371,374,401,404,431,434,461,464]}})(game||(game={}));
(function(c){c=c.data||(c.data={});c=c.layer||(c.layer={});c.ground=[[0,0,0,0,12,0,0,0,0],[0,0,0,0,11,0,0,0,0],[0,0,0,0,11,0,0,0,0],[1,0,1,0,11,0,1,0,1],[1,0,1,0,11,0,1,0,1],[1,1,1,1,1,1,1,1,1],[0,0,0,0,1,0,0,0,0],[1,0,1,0,1,0,1,0,1],[1,0,1,0,1,0,1,0,1],[1,1,1,1,1,1,1,1,1],[0,0,0,1,0,0,12,12,1],[0,0,0,1,1,0,12,0,0],[0,0,0,0,1,12,12,0,0],[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,0]];c.actors=[[0,0,0,2,6,2,0,0,0],[0,0,0,2,0,2,0,0,0],[0,0,0,2,0,2,0,0,0],[5,0,5,2,0,2,5,0,5],[0,0,0,2,0,2,0,0,0],[0,0,0,0,0,
0,0,0,0],[0,0,0,0,0,0,0,0,0],[4,0,4,0,0,0,4,0,4],[0,2,0,0,0,0,0,2,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,2,0,0,0,7],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,3,0,0,0,0],[0,0,0,0,0,0,0,0,0]]})(game||(game={}));
(function(c){var g=function(){function b(a,b,c,e){void 0===e&&(e=!1);this.Frames=a;this.Timeline=b;this.Duration=c;this.Loop=e;this.Progress=0;this.Name="unnamed";core.Assert(0<this.Duration,"Duration has to be greater than 0.");core.Assert(0<this.Frames.length,"Frames can't be empty.");core.Assert(this.Timeline.every(function(a){a=a[0];return 0<=a&&1>=a}),"Timeline point has to be in range [0, 1].");core.Assert(this.Timeline.every(function(a,b,c){a=a[0];return b<c.length-1?a<c[b+1][0]:1>a}),"Point on timeline has to be in ascending order.")}
b.prototype.Update=function(a){this.Progress+=a/this.Duration;this.Loop&&1<this.Progress&&--this.Progress;this.Progress=core.math.Clamp(this.Progress,0,1)};b.prototype.GetFrame=function(a){void 0===a&&(a=this.Progress);for(var b=this.Timeline.length-1;0<=b;--b){var c=this.Timeline[b],e=c[1];if(c[0]<=a)return this.Frames[e]}};b.prototype.IsDone=function(){return 1===this.Progress};b.prototype.Reset=function(){this.Progress=0};return b}(),f=function(){function b(){this.Animations={}}b.prototype.AddAnimation=
function(a,b,d){core.Assert(void 0===this.Animations[a],"Can't override animation "+a);return d instanceof c.SpriteSheet?this.AddAnimation_S(a,b,d):this.AddAnimation_D(a,b,d)};b.prototype.Play=function(a){core.Assert(void 0!==this.Animations[a],"Animation doesn't exist");this.ActiveAnimation&&this.ActiveAnimation.IsDone()&&this.ActiveAnimation.Reset();this.ActiveAnimation=this.Animations[a]};b.prototype.RestartAnimation=function(){this.ActiveAnimation&&this.ActiveAnimation.Reset()};b.prototype.Update=
function(a){this.ActiveAnimation&&this.ActiveAnimation.Update(a)};b.prototype.GetFrame=function(){if(this.ActiveAnimation)return this.ActiveAnimation.GetFrame();throw Error("There is no active frame.");};b.prototype.IsAnimationDone=function(a){return this.Animations[a].IsDone()};b.prototype.AddAnimation_S=function(a,b,c){var e=b.filter(function(a,c){return b.indexOf(a)==c}).map(function(a){return c.GetSprite(a)});b=b.map(function(a){return b.indexOf(a)});return this.AddAnimation_D(a,b,e)};b.prototype.AddAnimation_D=
function(a,b,c){var e=b.map(function(a,c){return[c/b.length,a]});c=this.Animations[a]=new g(c,e,1);c.Name=a;return c};return b}();c.Animator=f})(gfx||(gfx={}));(function(c){var g=function(f){function b(a,b,d,e,g){void 0===g&&(g=new c.Animator);f.call(this,a,b,d,e);this.Animator=g}__extends(b,f);b.prototype.DrawSelf=function(a){this.Animator.GetFrame().Draw(a)};b.prototype.Update=function(a){this.Animator.Update(a)};return b}(core.DisplayObject);c.AnimatedSprite=g})(gfx||(gfx={}));
(function(c){var g=function(c){function b(a,b,d,e){c.call(this,a,b,d,e);this.IsActive=!0;this.GridPosition=new core.Vector;this.Timer=new core.TimersManager;this.Tween=new core.TweenManager;this.EnableSubpixelMovement=!1}__extends(b,c);b.prototype.Update=function(a){this.Timer.Update(a);this.Tween.Update(a);this.EnableSubpixelMovement||this.Position.Set(Math.floor(this.Position.x),Math.floor(this.Position.y))};return b}(core.DisplayObject);c.Actor=g;g=function(c){function b(){c.apply(this,arguments);
this.Animator=new gfx.Animator;this.Sprite=new gfx.AnimatedSprite(0,0,this.Size.x,this.Size.y,this.Animator)}__extends(b,c);b.prototype.Update=function(a){c.prototype.Update.call(this,a);this.Sprite.Update(a);this.EnableSubpixelMovement||this.Sprite.Position.Set(Math.floor(this.Sprite.Position.x),Math.floor(this.Sprite.Position.y))};b.prototype.DrawSelf=function(a){this.Sprite.Draw(a)};return b}(g);c.AnimatedActor=g})(game||(game={}));
(function(c){(c.features||(c.features={})).IsMobileBrowser=/android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(navigator.userAgent.toLowerCase())})(core||(core={}));var audio;
(function(c){(function(){function c(){this.Sounds={};this.Volume=1}c.prototype.AddSound=function(b,a,c){void 0===c&&(c=1);var d=[];c=core.features.IsMobileBrowser?0:c;for(var e=0;e<c;++e){var f=jsfxr(a),g=new Audio;g.src=f;d.push(g)}this.Sounds[b]={index:0,pool:d}};c.prototype.Play=function(b,a){void 0===a&&(a=1);var c=this.Sounds[b];if(c=c.pool[c.index++%c.pool.length])c.volume=a*this.Volume,c.play()};return c})();var g=function(){function c(){this.Sounds={};this.PlayingSounds=[]}c.prototype.GetVolume=
function(){return Howler.volume()};c.prototype.SetVolume=function(b){Howler.volume(b)};c.prototype.Play=function(b,a,c){var d=this;void 0===a&&(a=1);void 0===c&&(c=!1);var e=this.Sounds[b];if(e)e.loop(c),e.volume(a),e.play(),-1===this.PlayingSounds.indexOf(e)&&(this.PlayingSounds.push(e),e.onend=function(){core.TryRemoveElement(d.PlayingSounds,e)});else throw Error("Sound with name "+b+" doesn't exist in this manager.");};c.prototype.StopAll=function(){this.PlayingSounds.forEach(function(b){return b.stop()});
this.PlayingSounds.length=0};c.prototype.FadeOutAll=function(b){void 0===b&&(b=2);this.PlayingSounds.forEach(function(a){return a.fade(1,0,b)})};c.prototype.LoadSound=function(b,a){var c=this;return(new Promise(function(b,c){var h=new Howl({urls:a,onload:function(){return b(h)},onloaderror:function(a){return c(a)}})})).then(function(a){return c.Sounds[b]=a})};c.prototype.LoadAll=function(b){var a=this;return Promise.all(b.map(function(b){return a.LoadSound(b[0],b[1])}))};return c}();c.manager=new g})(audio||
(audio={}));
(function(c){var g=function(f){function b(a,b,d){f.call(this,a,b,24,24);this.Face="left";this.Animator.AddAnimation("left",[c.assets.HERO_FACE_LEFT],d);this.Animator.AddAnimation("right",[c.assets.HERO_FACE_RIGHT],d);this.Animator.AddAnimation("up",[c.assets.HERO_FACE_UP],d);this.Animator.AddAnimation("falling",[c.assets.HERO_FALLING],d);this.Animator.AddAnimation("landing",c.assets.HERO_LANDING,d).Duration=.7;this.Shadow=d.GetSprite(c.assets.SMALL_SHADOW);this.Animator.Play("left");this.SetupDustParticles();this.Alpha=
0;this.IsActive=!1}__extends(b,f);b.prototype.DrawSelf=function(a){this.Shadow.Draw(a);this.DustParticles.Draw(a);this.Sprite.Draw(a)};b.prototype.PlayJump=function(a){var b=this;this.UpdateFace(a);return this.Tween.New(this.Position).To({x:a.x,y:a.y},.5,core.easing.SinusoidalInOut).Parallel(this.Sprite.Position,function(a){return a.To({y:b.Sprite.Position.y-10},.25,core.easing.CubicOut).Then().To({y:b.Sprite.Position.y},.25)}).Start()};b.prototype.PlayDead=function(a){var b=this;void 0===a&&(a=10);
return this.Tween.New(this).To({Alpha:0},2).Parallel(this.Position,function(c){return c.To({y:b.Position.y+a},2,core.easing.CubicOut)}).Start()};b.prototype.FallFromHeaven=function(){var a=this,b=this.ToLocal(new core.Vector(GAME.Canvas.width/2,0));this.Sprite.Position.Set(b.x-12,b.y-24);this.Animator.Play("falling");this.Alpha=1;return this.Tween.New(this.Sprite.Position).To({x:0,y:0},1,core.easing.CubicIn).WhenDone(function(){c.context.PlayState.ShakeScreen(.5);a.EmitParticles();audio.manager.Play("demon-hit")}).Then().Delay(.5).WhenDone(function(){a.IsActive=
!0;a.Timer.Delay(1,function(){return a.Animator.Play("landing")});a.Timer.Delay(2,function(){return a.Animator.Play("left")})}).Start()};b.prototype.UpdateFace=function(a){this.Face=0>a.y-this.Position.y?"up":0<a.x-this.Position.x?"right":"left";this.Animator.Play(this.Face)};b.prototype.EmitParticles=function(){var a=this;this.DustParticles.Visible=!0;this.DustParticles.Children.forEach(function(b){b.Position.Set(12,15);b.Size.Set(1,1);var c=new core.Vector(0,1);core.vector.Rotate(c,core.Random(-Math.PI,
Math.PI));core.vector.Scale(c,8);core.vector.Add(b.Position,c,c);b.Alpha=0;a.Tween.New(b.Position).To({x:c.x,y:c.y-3},1).OnUpdate(function(){b.Position.Set(b.Position.x|0,b.Position.y|0)}).Parallel(b,function(a){return a.To({Alpha:1},.5).Then().To({Alpha:0},.5)}).Start()})};b.prototype.SetupDustParticles=function(){this.DustParticles=new core.Layer;this.DustParticles.Alpha=.2;this.DustParticles.Visible=!1;for(var a=0;40>a;++a){var b=new gfx.Rectangle(0,0,2,2,{fillStyle:"#c0c0c0"});this.DustParticles.AddChild(b)}};
return b}(c.AnimatedActor);c.AHero=g})(game||(game={}));
(function(c){var g=function(){function f(){this.KilledDemons=[];this.AquiredItems=[];this.LifesLeft=3}f.prototype.IsOnlyBossAlive=function(){return 4===this.KilledDemons.length};f.prototype.AllDemonsKilled=function(){return 5===this.KilledDemons.length};f.prototype.PlayerHas=function(b){return-1!==this.AquiredItems.indexOf(b)};f.prototype.DemonNeedsLight=function(b){return-1!==["Dark","Purple","Green"].indexOf(b)};f.prototype.Reset=function(){console.log("Reseting context.");c.context=new f};return f}();
c.context=new g})(game||(game={}));
(function(c){var g=function(c){function b(a,b,d,e,g){void 0===g&&(g={fillStyle:"red"});c.call(this,a,b,d,e);this.Style=g}__extends(b,c);b.prototype.DrawSelf=function(a){this.Style.compositeOperation&&(a.globalCompositeOperation=this.Style.compositeOperation);this.Style.fillStyle&&(a.fillStyle=this.Style.fillStyle,a.fillRect(0,0,this.Size.x,this.Size.y));this.Style.strokeStyle&&(a.lineWidth=this.Style.lineWidth||1,a.strokeStyle=this.Style.strokeStyle,a.strokeRect(0,0,this.Size.x,this.Size.y))};return b}(core.DisplayObject);
c.Rectangle=g})(gfx||(gfx={}));(function(c){c.Random=function(c,f){if(f<c)throw Error();return c+Math.random()*(f-c)};c.TossCoin=function(c,f){return.5<Math.random()?c:f};c.RandomElement=function(c){return c[Math.random()*c.length|0]}})(core||(core={}));
(function(c){var g=function(f){function b(a,b,d){f.call(this,a,b,24,48);a=new gfx.SpriteSheet(d,new core.Vector(24,48),new core.Vector(0,24));this.Animator.AddAnimation("collapse",c.assets.FLOATING_TILE_FRAMES,a);this.Animator.AddAnimation("raise",c.assets.FLOATING_TILE_FRAMES.slice(0).reverse(),a);this.Animator.AddAnimation("idle",[c.assets.FLOATING_TILE_FRAMES[0]],a);this.Animator.Play("idle");this.SetupDustParticles()}__extends(b,f);b.prototype.Collapse=function(){var a=this.Sprite.Position;this.IsActive=
!1;audio.manager.Play("floor-collapsing",.5);this.Animator.Play("collapse");this.Tween.New(a).To({y:a.y+15},1).OnUpdate(function(){return a.Set(a.x|0,a.y|0)}).Parallel(this.Sprite,function(a){return a.To({Alpha:0},1)}).Parallel(null,function(a){return a.Delay(.25).WhenDone(function(){c.context.PlayState.ShakeScreen(.5)})}).Then().To({y:a.y},.01).Start();this.EmitParticles()};b.prototype.Raise=function(){var a=this,b=this.Sprite.Position;b.y+=15;this.Animator.Play("raise");this.Tween.New(b).To({y:b.y-
15},1).OnUpdate(function(){return b.Set(b.x|0,b.y|0)}).Parallel(this.Sprite,function(a){return a.To({Alpha:1},1)}).Start().WhenDone(function(){return a.Animator.Play("idle")})};b.prototype.RaiseWhenVisible=function(){var a=this;this.Visible=!1;this.Sprite.Alpha=0;var b=this.Timer.Repeat(0,function(){a.Visible&&(a.Raise(),b.Stop())})};b.prototype.DrawSelf=function(a){this.Sprite.Draw(a);this.DustPartices.Draw(a)};b.prototype.EmitParticles=function(){var a=this;this.DustPartices.Visible=!0;this.DustPartices.Children.forEach(function(b){b.Position.Set(12+
core.Random(-6,6),20+core.Random(-2,2));b.Size.Set(1,1);var c=new core.Vector(0,1);core.vector.Rotate(c,core.Random(-Math.PI,Math.PI));core.vector.Scale(c,8);core.vector.Add(b.Position,c,c);b.Alpha=0;a.Tween.New(b.Position).Delay(.5).Then().To({x:c.x,y:c.y-15},4).OnUpdate(function(){b.Position.Set(b.Position.x|0,b.Position.y|0)}).Parallel(b,function(a){return a.To({Alpha:1},1).Then().To({Alpha:0},3)}).Start()})};b.prototype.SetupDustParticles=function(){this.DustPartices=new core.Layer;this.DustPartices.Alpha=
.2;this.DustPartices.Visible=!1;for(var a=0;40>a;++a){var b=new gfx.Rectangle(0,0,2,2,{fillStyle:"#c0c0c0"});this.DustPartices.AddChild(b)}};return b}(c.AnimatedActor);c.AFloatingTile=g})(game||(game={}));(function(c){var g=function(f){function b(a,b,d){f.call(this,a,b,d.CellSize.x,d.CellSize.y);this.Animator.AddAnimation("idle",c.assets.GREEN_TORCH_FRAMES,d).Loop=!0;this.Animator.Play("idle")}__extends(b,f);return b}(c.AnimatedActor);c.ATorch=g})(game||(game={}));
(function(c){var g=function(c){function b(a,b,d){c.call(this,a,b,0,0);this.Label=new gfx.AAText(0,0,d);this.Label.SetSize(5);this.Label.Size.Clone(this.Size)}__extends(b,c);b.prototype.DrawSelf=function(a){this.Label.Draw(a)};return b}(c.Actor);c.AText=g})(game||(game={}));
(function(c){var g=function(b){function a(a,c,e,f,g){b.call(this,a,c,24,48);this.Name=g;this.Animator.AddAnimation("idle",e.map(function(a,b){return b}),e.map(function(a){a=f.GetSprite(a);a.SourceRect.Size.Set(24,48);a.Size.Set(24,48);return a})).Loop=!0;this.Animator.Play("idle");this.Sprite.Position.y-=17}__extends(a,b);return a}(c.AnimatedActor);c.ADemon=g;var f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.RED_DEMON_FRAMES,e,"Red")}__extends(a,b);return a}(g);c.ARedDemon=f;f=function(b){function a(a,
d,e){b.call(this,a,d,c.assets.BLUE_DEMON_FRAMES,e,"Blue");this.Animator.Animations.idle.Duration=2}__extends(a,b);return a}(g);c.ABlueDemon=f;f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.GREEN_DEMON_FRAMES,e,"Green")}__extends(a,b);return a}(g);c.AGreenDemon=f;f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.PURPLE_DEMON_FRAMES,e,"Purple")}__extends(a,b);return a}(g);c.APurpleDemon=f;g=function(b){function a(a,d,e){b.call(this,a,d,c.assets.DARK_DEMON_FRAMES,e,"Dark");this.Animator.Animations.idle.Duration=
2}__extends(a,b);return a}(g);c.ADarkDemon=g})(game||(game={}));
(function(c){var g=function(b){function a(a,d,e,f,g){b.call(this,a,d,24,24);this.Name=g;this.Animator.AddAnimation("idle",e,f).Loop=!0;this.Animator.Play("idle");this.Shadow=f.GetSprite(c.assets.SMALL_SHADOW);this.Tween.New(this.Sprite.Position).To({y:-4},1,core.easing.SinusoidalInOut).Then().To({y:.5},1,core.easing.SinusoidalInOut).Loop().Start()}__extends(a,b);a.prototype.DrawSelf=function(a){this.Shadow.Draw(a);this.Sprite.Draw(a)};a.prototype.ShowInGlory=function(){this.Tween.StopAll(!1);return this.Tween.New(this.Sprite.Position).To({y:-18},
1,core.easing.CubicOut).Start()};return a}(c.AnimatedActor);c.AItem=g;var f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.HEART,e,"Life")}__extends(a,b);a.prototype.Execute=function(){4>c.context.LifesLeft&&(c.context.LifesLeft+=1)};a.prototype.GetDescription=function(){return["one more","chance"]};return a}(g);c.ALifeBonus=f;f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.SWORD,e,"Sword")}__extends(a,b);a.prototype.Execute=function(){};a.prototype.GetDescription=function(){return["attack",
"increased"]};return a}(g);c.AAttackBonus=f;f=function(b){function a(a,d,e){b.call(this,a,d,c.assets.PLAYER_TORCH,e,"Light")}__extends(a,b);a.prototype.Execute=function(){};a.prototype.GetDescription=function(){return["coisy","fire"]};return a}(g);c.ALightBonus=f;g=function(b){function a(a,d,e){b.call(this,a,d,c.assets.COW_BELL,e,"Secret")}__extends(a,b);a.prototype.Execute=function(){};a.prototype.GetDescription=function(){return["there is no","cow level"]};return a}(g);c.ASecret=g})(game||(game=
{}));
(function(c){var g=["Red","Blue"],f=["Green","Purple"],b=["Sword","Life"],a=["Punch","Light"],h=["Dark"],d=new core.Vector,e=function(){var c=core.ShuffleArray,d=c(f),e=c(a),q=c(g),k=c(b);return h.concat(c([d[0],e[0]]).concat(c([d[1],e[1]])).concat(c([q[0],k[0]]).concat(c([q[1],k[1]]))))}(),q=function(a){function b(d,e){a.call(this,d,e);this.GroundLayer=new core.Layer;this.GroundLookup=[];this.ActorLayer=new core.Layer;this.Demons=[];this.Items=[];this.Timer=new core.TimersManager;c.context.Purgatory=this;
this.SpriteSheet=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24));this.Spawner=new k(this.SpriteSheet);this.BuildTileLayers();this.Size.Set(c.data.layer.ground[0].length,c.data.layer.ground.length);core.vector.Scale(this.Size,24,this.Size);this.Timer.Delay(0,function(){return audio.manager.Play("temple",.7,!0)})}__extends(b,a);b.prototype.Update=function(a){for(var b=0,c=this.GroundLayer.Children;b<c.length;b++){var e=c[b];e.Update(a);this.ToGlobal(e.Position,d);e.Visible=-240<d.x&&d.x<GAME.Canvas.width&&
-240<d.y&&d.y<GAME.Canvas.height}b=0;for(c=this.ActorLayer.Children;b<c.length;b++)e=c[b],e.Update(a),this.ToGlobal(e.Position,d),e.Visible=-240<d.x&&d.x<GAME.Canvas.width&&-240<d.y&&d.y<GAME.Canvas.height;this.Timer.Update(a)};b.prototype.MovePlayer=function(a){this.Timer.Throttle(.18,this.DoMovePlayer,this,a)};b.prototype.DoMovePlayer=function(a){var b=this;if(c.context.PlayState.CameraTweens.TweenPlaying())c.context.PlayState.CameraTweens.Update(2);else if(this.Player.IsActive||this.Player.Tween.Update(1),
this.Player.IsActive&&!this.Player.Tween.TweenPlaying()){var e=this.Player.GridPosition.Clone();switch(a){case 0:--e.x;break;case 2:--e.y;break;case 1:e.x+=1}a=this.GridPosToLayerPos(e);if(this.CanMoveTo(e)){var d=this.Player.GridPosition;this.GroundLookup[d.y][d.x].Collapse();e.Clone(this.Player.GridPosition);this.Player.PlayJump(a).WhenDone(function(){return b.TileAction(b.Player.GridPosition)})}else this.Player.IsActive=!1,this.Player.PlayJump(a).WhenDone(function(){return b.PlayerDied()})}};b.prototype.GridPosToLayerPos=
function(a,b){void 0===b&&(b=new core.Vector);core.vector.Multiply(a,this.SpriteSheet.CellSize,b);return b};b.prototype.PlayerDied=function(){this.Timer.Delay(1,function(){return c.context.PlayState.DimScreen(!1,1)});this.Player.PlayDead().WhenDone(function(){--c.context.LifesLeft;GAME.Play("you-died")})};b.prototype.TileAction=function(a){for(var b=this,e=function(e){e.GridPosition.x==a.x&&e.GridPosition.y==a.y&&(d.Player.IsActive=!1,c.context.PlayState.Timers.Delay(.7,function(){b.Timer.Delay(0,
function(){return audio.manager.Play("monster-fight")});c.context.PlayState.BlinkScreen(1);c.context.PlayState.ShakeScreen(1).WhenDone(function(){c.context.PlayState.BeginFigthMode(e.Name)})}))},d=this,f=0,h=this.Demons;f<h.length;f++)e(h[f]);for(var e=function(e){e.GridPosition.x==a.x&&e.GridPosition.y==a.y&&(g.Player.IsActive=!1,c.context.AquiredItems.push(e.Name),e.Execute(),e.ShowInGlory(),audio.manager.FadeOutAll(.5),audio.manager.Play("item-aquired"),g.ShowText(e.GetDescription()[0],"white",
15),g.ShowText(e.GetDescription()[1],"white",21).WhenDone(function(){var a=b.Player.GridPosition;b.GroundLookup[a.y][a.x].Collapse();e.Visible=!1;c.context.PlayState.DimScreen();b.Player.PlayDead(30).WhenDone(function(){c.context.PlayState.RestartPurgatory()})}))},g=this,f=0,h=this.Items;f<h.length;f++)e(h[f]);return!1};b.prototype.ShowText=function(a,b,e){void 0===b&&(b="white");void 0===e&&(e=0);var d=new core.Vector(GAME.Canvas.width/2,GAME.Canvas.height/2),d=this.ToLocal(d),f=new c.AText(0,d.y+
e,a.toUpperCase());f.Label.SetColor(b);f.Anchor.Set(.5,.5);f.Position.x=this.ToLocal(new core.Vector(GAME.Canvas.width,0)).x+20;this.ActorLayer.AddChild(f);return this.Player.Tween.New(f.Position).To({x:d.x},1,core.easing.SinusoidalInOut).Then().Delay(2).Then().To({x:this.ToLocal(core.vector.Zero).x-20},1,core.easing.SinusoidalInOut).Start().WhenDone(function(){f.RemoveFromParent()})};b.prototype.CanMoveTo=function(a){return 0>a.y||a.y>this.GroundLookup.length-1?!1:(a=this.GroundLookup[a.y][a.x])?
a.IsActive:!1};b.prototype.BuildTileLayers=function(){var a=this;c.data.layer.ground.forEach(function(b,e){a.GroundLookup.push([]);b.forEach(function(b,d){var f;switch(b){case 0:return;case 1:f=new c.AFloatingTile(0,0,a.SpriteSheet.ImageId);break;case 11:if(c.context.IsOnlyBossAlive())f=new c.AFloatingTile(0,0,a.SpriteSheet.ImageId),f.RaiseWhenVisible();else return;break;case 12:f=new c.AFloatingTile(0,0,a.SpriteSheet.ImageId);f.Alpha=0;break;default:throw Error("tile not mapped.");}f.GridPosition.Set(d,
e);core.vector.Multiply(f.GridPosition,a.SpriteSheet.CellSize,f.Position);a.GroundLookup[e][d]=f;a.GroundLayer.AddChild(f)})});var b=0;c.data.layer.actors.forEach(function(e,d){e.forEach(function(e,f){var h;switch(e){case 0:return;case 2:h=new c.ATorch(0,0,a.SpriteSheet);break;case 3:h=a.Player=new c.AHero(0,0,a.SpriteSheet);a.Timer.Delay(.8,function(){var b=a.Player.FallFromHeaven();c.context.IsOnlyBossAlive()&&b.WhenDone(function(){a.CameraShowPathToFinalBoss()})});break;case 4:case 5:case 6:h=
a.Spawner.SpawnActor(b++);if(h instanceof c.ADemon)a.Demons.push(h);else if(h instanceof c.AItem)a.Items.push(h);else return;break;case 7:if(c.context.PlayerHas("Secret"))return;h=new c.ASecret(0,0,a.SpriteSheet);a.Items.push(h);break;default:console.error("actor not mapped. ("+e+")");return}h.GridPosition.Set(f,d);core.vector.Multiply(h.GridPosition,a.SpriteSheet.CellSize,h.Position);a.ActorLayer.AddChild(h)})});this.AddChild(this.GroundLayer);this.AddChild(this.ActorLayer)};b.prototype.CameraShowPathToFinalBoss=
function(){var a=this,b=this.Demons.filter(function(a){return"Dark"===a.Name})[0];this.Player.IsActive=!1;c.context.PlayState.MoveCameraTo(b.Position,10).WhenDone(function(){c.context.PlayState.DimScreen(!1,1)}).Then().Delay(1).WhenDone(function(){c.context.PlayState.DimScreen(!0,1);a.Player.IsActive=!0})};return b}(core.Layer);c.Purgatory=q;var k=function(){function d(e){this.Sheet=e;this.DemonNames=g.concat(f).concat(h);this.ItemNames=b.concat(a);this.AliveDemons=this.DemonNames.filter(function(a){return-1===
c.context.KilledDemons.indexOf(a)});this.LeftItems=this.ItemNames.filter(function(a){return-1===c.context.AquiredItems.indexOf(a)})}d.prototype.SpawnActor=function(a){a=e[a];if(this.ActorExist(a))switch(a){case "Red":return new c.ARedDemon(0,0,this.Sheet);case "Blue":return new c.ABlueDemon(0,0,this.Sheet);case "Green":return new c.AGreenDemon(0,0,this.Sheet);case "Purple":return new c.APurpleDemon(0,0,this.Sheet);case "Dark":return new c.ADarkDemon(0,0,this.Sheet);case "Life":return new c.ALifeBonus(0,
0,this.Sheet);case "Sword":return new c.AAttackBonus(0,0,this.Sheet);case "Light":return new c.ALightBonus(0,0,this.Sheet)}};d.prototype.ActorExist=function(a){return-1!==this.AliveDemons.indexOf(a)||-1!==this.LeftItems.indexOf(a)};return d}()})(game||(game={}));
(function(c){var g=function(c){function b(a,b,d,e){var g=this;void 0===e&&(e="white");c.call(this,a,b,d[0].length,d.length);this.Pixels=d;this.Color=e;this.FloatPosition=new core.Vector;core.Assert(0<d.length,"Pixels can't be null.");this.Position.Clone(this.FloatPosition);this.Size.Set(d[0].length,d.length);this.Timer.Repeat(0,function(){return g.FloatPosition.Clone(g.Position)});this.Cache()}__extends(b,c);b.prototype.DrawSelf=function(a){a.fillStyle=this.Color;for(var b=0;b<this.Pixels.length;++b)for(var c=
this.Pixels[b],e=0;e<c.length;++e)0!==c[e]&&a.fillRect(e,b,1,1)};b.prototype.GetBottomRight=function(a){void 0===a&&(a=new core.Vector);vec.Add(this.Position,this.Size,a);return a};b.prototype.Blink=function(a,b){var c=this;void 0===a&&(a=1);void 0===b&&(b=.05);var e=a/b|0;this.Timer.Repeat(b,function(a){c.Visible=a==e?!0:!c.Visible},void 0,e)};return b}(c.Actor);c.ATooth=g;(function(c){function b(b,c){if(b.Size.x*b.Size.y>c.Size.x*c.Size.y){var f=b;b=c;c=f}f=a;vec.Subtract(b.Position,c.Position,
f);for(var h=0;h<b.Size.y;++h)if(c.Pixels[h+f.y])for(var g=0;g<b.Size.x;++g){var n=c.Pixels[h+f.y][g+f.x];if(void 0!=n&&0!=b.Pixels[h][g]&&0!=n)return!0}return!1}var a=new core.Vector,h=new core.Vector;c.PixelPerfectCollision=b;c.Collide=function(c,e){var f=c.GetBottomRight(a),g=c.Position,l=e.GetBottomRight(h),n=e.Position;return g.x>l.x||f.x<n.x||g.y>l.y||f.y<n.y?!1:b(c,e)};c.player=[[0,0,0,1],[1,0,1,0],[0,1,0,0],[1,0,1,0]];c.SpikeLike=function(a,b){void 0===b&&(b=Math.floor(a/2)+1);core.Assert(1===
a%2,"only odd width");core.Assert(0<b);core.Assert(2*b-1>=a);for(var c=Math.floor(a/2)+1,f=[],h=0;h<c;++h){for(var g=[],m=0;m<a/2-1;++m)g[m]=a/2-1-m<h?1:0;g[Math.floor(a/2)]=1;for(var m=Math.floor(a/2)+1,p=0;m<a;++m,++p)g[m]=g[Math.floor(a/2)-1-p];f.push(g)}c=[f[0]];for(g=1;;++g)for(h=1;h<f.length;++h)if(c.splice(h*g,0,f[h].slice(0)),c.length===b)return c};c.CircleLike=function(a,b){core.Assert(1===a%2,"only odd width");core.Assert(0<b);for(var c=a/2,f=[],h=0;h<b;++h){for(var g=[],m=0;m<a;++m){var p=
m-c,r=h-c;g[m]=Math.sqrt(p*p+r*r)<c?1:0}f.push(g)}return f};c.SlashLike=function(a,b,c,f){void 0===c&&(c=1);void 0===f&&(f=!0);core.Assert(0<b);for(var h=[],g=0;g<b;++g){for(var m=[],p=0;p<a;++p)m[p]=p<g*c?1:0;f||m.reverse();h.push(m)}return h}})(c.tooth||(c.tooth={}))})(game||(game={}));
(function(c){var g=function(c){function b(a,b,d,e){c.call(this,a,b,64,64);core.Assert(2==d.length);a=d.map(function(a){return e.GetSprite(a)});a.forEach(function(a){a.SourceRect.Size.Set(64,64);a.Size.Set(64,64)});this.Animator.AddAnimation("idle",[0],a);this.Animator.AddAnimation("hurt",[1],a);this.Animator.Play("idle")}__extends(b,c);b.prototype.Hurt=function(){var a=this;this.Animator.Play("hurt");this.Timer.Delay(.3,function(){return a.Animator.Play("idle")})};return b}(c.AnimatedActor);c.ADemonFace=
g})(game||(game={}));
(function(c){var g=function(){function b(a,b,c,e){void 0===e&&(e=1);this.r=a;this.g=b;this.b=c;this.a=e;this.r=Math.round(a);this.g=Math.round(b);this.b=Math.round(c)}b.prototype.ToHSV=function(){var a=this.r,b=this.g,c=this.b,e=Math.max(a,b,c),g=Math.min(a,b,c),k=e-g,l;switch(e){case g:l=0;break;case a:l=(b-c+k*(b<c?6:0))/(6*k);break;case b:l=(c-a+2*k)/(6*k);break;case c:l=(a-b+4*k)/(6*k)}return new f(l,0===e?0:k/e,e/255,this.a)};b.prototype.toString=function(){return"rgba("+this.r+", "+this.g+", "+
this.b+", "+this.a+")"};return b}();c.RgbColor=g;var f=function(){function b(a,b,c,e){void 0===e&&(e=1);this.h=a;this.s=b;this.v=c;this.a=e}b.prototype.ToRGB=function(){var a=this.h,b=this.s,c=this.v,e=Math.floor(6*a),f=6*a-e,a=c*(1-b),k=c*(1-f*b),b=c*(1-(1-f)*b),l,n,m;switch(e%6){case 0:l=c;n=b;m=a;break;case 1:l=k;n=c;m=a;break;case 2:l=a;n=c;m=b;break;case 3:l=a;n=k;m=c;break;case 4:l=b;n=a;m=c;break;case 5:l=c,n=a,m=k}return new g(255*l,255*n,255*m,this.a)};b.prototype.toString=function(){return"hsva("+
this.h+", "+this.s+", "+this.v+", "+this.a+")"};return b}();c.HsvColor=f})(core||(core={}));
(function(c){var g=function(){function f(b){this.Value=b;this.OnChange=new c.CallbackSet}f.prototype.Get=function(){return this.Value};f.prototype.Set=function(b){var a=this.Value;this.Value=b;this.OnChange.CallAll(b,a)};f.prototype.toString=function(){return this.Value.toString()};return f}();c.ObservableProperty=g;g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Increment=function(a){void 0===a&&(a=1);this.Set(this.Value+a)};return b}(g);c.ObservableNumber=g})(core||
(core={}));
(function(c){var g=function(){function a(b,c,e,d){void 0===d&&(d="white");this.Upper=b;this.Lower=c;this.Gap=e;this.Color=d;core.Assert(b.length===c.length);this.Lower=c.map(function(a){return a?a.slice(0):a});this.Upper=b.map(function(a){return a?a.slice(0):a});this.LastX=this.Gap*(this.Lower.length-1);this.Upper.forEach(function(a){if(a)return a.reverse()})}a.prototype.SpawnAll=function(a,b){var e=this,d=[];this.Upper.forEach(function(b,f){b&&d.push(new c.ATooth(a.x+f*e.Gap,a.y,b,e.Color))});this.Lower.forEach(function(a,
f){if(a){var g=new c.ATooth(b.x+f*e.Gap,b.y,a,e.Color);g.FloatPosition.y-=g.Size.y;d.push(g)}});return d};return a}();c.TeethGenertor=g;var g=c.tooth.SpikeLike(15,25),f=c.tooth.SpikeLike(15,35),b=c.tooth.SpikeLike(19,25),a=c.tooth.SpikeLike(19,32),h=c.tooth.SpikeLike(19,16),d=c.tooth.SpikeLike(25,13),e=c.tooth.CircleLike(15,16),q=c.tooth.CircleLike(15,38),k=c.tooth.SlashLike(15,29,.25,!1),l=c.tooth.SlashLike(15,29,.25);c.theeth={Red:{upper:[g,void 0,b,void 0,h,void 0],lower:[void 0,a,void 0,f,h,f],
gap:30},Blue:{upper:[d,d,d,h,void 0,d,d,d,h,d],lower:[d,d,d,h,d,d,d,d,h,void 0],gap:25},Green:{upper:[void 0,q,void 0,e,void 0,q],lower:[q,void 0,q,e,q,void 0],gap:25,color:"#ac3232"},Purple:{upper:[k,void 0,k,void 0,l,void 0],lower:[l,void 0,l,void 0,k,void 0],gap:13},Dark:{upper:[k,void 0,k,void 0,g,void 0,g,h,h],lower:[l,void 0,l,void 0,void 0,f,void 0,h,h],gap:15}}})(game||(game={}));
(function(c){var g=function(c){function b(a,b,d,e){void 0===e&&(e={fillStyle:"red"});c.call(this,a,b,2*d,2*d);this.Style=e;this.Angle={Start:0,Stop:2*Math.PI};if(0>=d)throw Error();}__extends(b,c);b.prototype.DrawSelf=function(a){var b=this.Size.x/2;a.beginPath();a.arc(b,b,b-1,this.Angle.Start,this.Angle.Stop);this.Style.compositeOperation&&(a.globalCompositeOperation=this.Style.compositeOperation);this.Style.lineWidth&&(a.lineWidth=this.Style.lineWidth);this.Style.fillStyle&&(a.fillStyle=this.Style.fillStyle,
a.fill());this.Style.strokeStyle&&(a.strokeStyle=this.Style.strokeStyle,a.stroke())};return b}(core.DisplayObject);c.Circle=g})(gfx||(gfx={}));
(function(c){var g=function(a){return a.Set(Math.floor(a.x),Math.floor(a.y))},f=function(f){function d(a,d,g,l){var n=this;f.call(this,a,d,64,64);this.DemonName=l;this.Mouth=new core.Layer(5,15,54,45);this.Face=new core.Layer(0,0,64,64);this.Teeth=new core.Layer;this.TeethVelocity=new core.Vector(-10,0);this.Player=new c.ATooth(5,20,c.tooth.player);this.PlayerVelocity=new core.Vector(0,0);this.CanFlap=!0;this.LockFlap=!1;this.Gravity=new core.Vector(0,80);this.DemonHealthBar=new b(5,2,54,2,new core.RgbColor(174,
50,50,1));this.TimeScale=1;this.Timers=new core.TimersManager;this.Tween=new core.TweenManager;this.BloodTween=new core.TweenManager;this.BloodParticles=new core.Layer;a=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24));this.DemonFace=new c.ADemonFace(0,0,c.assets.FIGHT_DEMON_MOUTH[l.toUpperCase()],a);this.DemonHealthBarBg=a.GetSprite(c.assets.FIGHT_DEMON_HEALTHBAR);this.DemonHealthBarBg.SourceRect.Size.Set(64,7);this.DemonHealthBarBg.Size.Set(64,7);g.SpawnAll(new core.Vector(this.Size.x/
2,0),new core.Vector(this.Size.x/2,45)).forEach(function(a){a.Visible=a.Position.x<n.Mouth.Size.x+10;n.Teeth.AddChild(a)});this.ToothRestartX=g.LastX;this.Mouth.AddChild(this.Teeth,this.Player,this.BloodParticles);this.Face.AddChild(this.DemonFace);c.context.DemonNeedsLight(this.DemonName)&&(c.context.PlayerHas("Light")||this.ActiveLightCone(a));this.SetupBloodParticles(20);this.BloodParticles.Visible=!1;this.DemonHealthBar.Progress.OnChange.Add(function(a){0>=a&&n.DemonSlayed()});this.TimeScale=
0;this.Timers.Delay(0,function(){return audio.manager.Play("fight-scene",.7,!0)});c.context.PlayState.DimScreen(!0,2).WhenDone(function(){return n.TimeScale=1})}__extends(d,f);d.prototype.Update=function(a){a*=this.TimeScale;this.Timers.Update(a);this.BloodTween.Update(a);this.Tween.Update(a);this.DemonFace.Update(a);var b=this.CheckCollision();this.IntegrateVelocity(a);b||(0>this.Player.FloatPosition.y?this.DemonTakeDamage(!0):this.Player.FloatPosition.y>this.Mouth.Size.y-this.Player.Size.y&&this.DemonTakeDamage(!1));
this.Player.FloatPosition.y=core.math.Clamp(this.Player.FloatPosition.y,0,this.Mouth.Size.y-this.Player.Size.y);this.Player.Update(a)};d.prototype.DrawSelf=function(a){this.Mouth.Draw(a);this.Face.Draw(a);this.DemonHealthBarBg.Draw(a);this.DemonHealthBar.Draw(a)};d.prototype.Flap=function(){!this.LockFlap&&this.CanFlap&&this.Player.IsActive&&(this.PlayerVelocity.y=-40,this.CanFlap=!1)};d.prototype.Flip=function(){this.CanFlap=!0};d.prototype.DemonTakeDamage=function(a){var b=this;if(this.Player.IsActive){this.DemonFace.Hurt();
audio.manager.Play("demon-hit");this.PlayerVelocity.y=40*(a?.45:-1);c.context.PlayState.ShakeScreen(.3,3);this.LockFlap=!0;this.Timers.Delay(.25,function(){return b.LockFlap=!1});var d=new core.Vector;a?this.Player.Position.Clone(d):vec.Add(this.Player.Position,this.Player.Size,d);this.EmitBloodParicles(d,a);c.context.PlayerHas("Sword")?this.DemonHealthBar.Progress.Increment(-.101):this.DemonHealthBar.Progress.Increment(-.05)}};d.prototype.PlayerTakeDamage=function(){this.Player.IsActive&&(audio.manager.FadeOutAll(),
this.Player.IsActive=!1,this.TeethVelocity.Set(0,0),this.Gravity.Set(0,0),this.PlayerVelocity.Set(0,0),this.Tween.New(this.Mouth).Delay(2).Then().To({Alpha:0},1.5).Start(),this.Tween.New(this.Face).Delay(2).Then().To({Alpha:0},2).Start().WhenDone(function(){--c.context.LifesLeft;GAME.Play("you-died")}))};d.prototype.DemonSlayed=function(){var a=this;this.Player.IsActive&&(c.context.KilledDemons.push(this.DemonName),audio.manager.FadeOutAll(),this.Player.IsActive=!1,this.TeethVelocity.Set(0,0),this.Gravity.Set(0,
0),this.PlayerVelocity.Set(0,0),this.Tween.New(this.Mouth).Delay(2).Then().To({Alpha:0},1.5).Parallel(this.Mouth.Position,function(b){return b.To({y:a.Mouth.Position.y+50},2,core.easing.CubicIn).OnUpdate(g)}).Start(),this.Tween.New(this.Face).Delay(2).WhenDone(function(){return c.context.PlayState.ShakeScreen(2,4)}).Then().To({Alpha:0},2).Parallel(this.Face.Position,function(b){return b.To({y:a.Face.Position.y+50},2,core.easing.CubicIn).OnUpdate(g)}).Start().WhenDone(function(){GAME.Play("demon-slayed")}))};
d.prototype.CheckCollision=function(){for(var a=0,b=this.Teeth.Children;a<b.length;a++){var d=b[a];if(c.tooth.Collide(this.Player,d))return d.IsActive&&(d.IsActive=!1,d.Blink(2,.1),this.PlayerTakeDamage()),!0}return!1};d.prototype.IntegrateVelocity=function(a){var b=new core.Vector;vec.Scale(this.TeethVelocity,a,b);for(var c=0,d=this.Teeth.Children;c<d.length;c++){var f=d[c];vec.Add(f.FloatPosition,b,f.FloatPosition);f.Update(a);-20>f.Position.x?(f.FloatPosition.x=this.ToothRestartX,f.IsActive=!0,
f.Visible=!1):f.Position.x>=this.Mouth.Size.x&&f.Position.x<this.Mouth.Size.x+10&&(f.Visible=!0)}vec.Scale(this.Gravity,a,b);vec.Add(this.PlayerVelocity,b,this.PlayerVelocity);vec.Scale(this.PlayerVelocity,a,b);vec.Add(this.Player.FloatPosition,b,this.Player.FloatPosition)};d.prototype.SetupBloodParticles=function(a){for(var b=0;b<a;++b)this.BloodParticles.AddChild(new gfx.Rectangle(0,0,1,1,{fillStyle:"rgba(255, 0, 0, 0.5)"}))};d.prototype.EmitBloodParicles=function(a,b){var c=this;this.BloodTween.StopAll(!1);
this.BloodParticles.Visible=!0;for(var d=0,f=this.BloodParticles.Children;d<f.length;d++){var h=f[d];h.Position.Set(0,0);h.Alpha=1;var p=core.Random(5,10),r=p/10*1;this.BloodTween.New(h.Position).To({y:b?p:-p,x:core.Random(-5,5)},r/2,core.easing.CubicOut).OnUpdate(g).Then().OnUpdate(g).To({y:0},r/2,core.easing.CubicIn).Start()}d=1.5*this.TeethVelocity.x;this.BloodParticles.Position.Set(a.x,a.y);this.BloodTween.New(this.BloodParticles.Position).OnUpdate(g).To({x:a.x+d},1).Start().WhenDone(function(){return c.BloodParticles.Visible=
!1})};d.prototype.ActiveLightCone=function(b){var d=this;b=b.GetSprite(c.assets.FIGHT_LIGHT_CONE);b.Size.Set(40,40);b.SourceRect.Size.Set(40,40);this.LightCone=new a(0,0,b);this.LightCone.Position.x=this.Player.Position.x-this.LightCone.Size.x/2+2;this.Timers.Repeat(0,function(){d.LightCone.Position.y=d.Player.Position.y-d.LightCone.Size.x/2+2});this.Mouth.AddChild(this.LightCone)};return d}(core.DisplayObject);c.FightMode=f;var b=function(a){function b(c,d,f,g,n){var m=this;a.call(this,c,d,f,g);
this.Progress=new core.ObservableNumber(1);this.Fill=new gfx.Rectangle(0,0,f,g,{fillStyle:n.toString()});this.Progress.OnChange.Add(function(a){a=core.math.Clamp(a,0,1);m.Fill.Size.x=a*f|0})}__extends(b,a);b.prototype.DrawSelf=function(a){this.Fill.Draw(a)};return b}(core.DisplayObject),a=function(a){function b(c,d,f){a.call(this,c,d,f.Size.x,f.Size.y);this.Shape=f}__extends(b,a);b.prototype.DrawSelf=function(a){a.globalCompositeOperation="destination-in";this.Shape.Draw(a)};return b}(core.DisplayObject)})(game||
(game={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){var a=this;c.prototype.Start.call(this);var b;[["GAME BY","KAKUS","","MUSIC BY","CARLOS PAZUZU"],["MADE WITH","\u2665","FOR","LOWREZJAM","2016"]].forEach(function(c,e){var f=new core.Layer(32,32,64,0);f.Anchor.Set(0,.5);f.Alpha=0;c.forEach(function(a,b){var c=new gfx.AAText(0,3+8*b,a);c.SetSize(5);c.Anchor.Set(.5,.5);"\u2665"===a[0]&&c.SetColor("red");f.Size.y+=c.Size.y+3;f.AddChild(c)});a.Stage.AddChild(f);
b=a.Tweens.New(f).Delay(1+5*e).Then().To({Alpha:1},1).Then().Delay(3).Then().To({Alpha:0},1).Start()});b.WhenDone(function(){return a.OnKeyDown(0)});this.DimScreen(!0,2);this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};b.prototype.OnKeyUp=function(a){};b.prototype.OnKeyDown=function(a){this.Game.Play("menu")};return b}(c.AbstractState);c.SplashScreen=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){this.IsKeyDown=[];this.CameraTweens=new core.TweenManager;this.DefaultSize.Set(64,64);this.ScreenCenter=new core.Vector(this.DefaultSize.x/2-12,this.DefaultSize.y/2-12);c.prototype.Start.call(this);game.context.PlayState=this;this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.FPSText.Position.Set(0,0);this.OnResize();this.RestartPurgatory()};b.prototype.OnKeyUp=
function(a){this.IsKeyDown[a]=!1};b.prototype.OnKeyDown=function(a){this.IsKeyDown[a]=!0};b.prototype.Update=function(a){c.prototype.Update.call(this,a);this.CameraTweens.Update(a);this.FightMode&&(this.IsKeyDown[38]||this.IsKeyDown[87]||this.IsKeyDown[32]?this.FightMode.Flap():this.FightMode.Flip(),this.FightMode.Update(a));this.Purgatory&&(this.IsKeyDown[37]||this.IsKeyDown[65]?this.Purgatory.MovePlayer(0):this.IsKeyDown[38]||this.IsKeyDown[87]?this.Purgatory.MovePlayer(2):(this.IsKeyDown[39]||
this.IsKeyDown[68])&&this.Purgatory.MovePlayer(1),this.Purgatory.Update(a),this.CameraTweens.TweenPlaying()||this.CenterCamera())};b.prototype.OnResize=function(){c.prototype.OnResize.call(this)};b.prototype.BeginFigthMode=function(a){audio.manager.StopAll();var b=new game.TeethGenertor(game.theeth[a].upper,game.theeth[a].lower,game.theeth[a].gap,game.theeth[a].color);this.FightMode=new game.FightMode(0,0,b,a);this.Stage.AddChild(this.FightMode);this.Purgatory&&(this.Purgatory.RemoveFromParent(),
this.Purgatory=null)};b.prototype.RestartPurgatory=function(){audio.manager.StopAll();this.Purgatory&&this.Purgatory.RemoveFromParent();this.Stage.Alpha=1;this.DimScreen(!0);this.Purgatory=new game.Purgatory(.5,.5);this.Stage.AddChild(this.Purgatory)};b.prototype.BlinkScreen=function(a,b){void 0===a&&(a=1);void 0===b&&(b=.1);var c=new gfx.Rectangle(0,0,this.Stage.Size.x,this.Stage.Size.y,{fillStyle:"white",compositeOperation:"difference"});this.Stage.AddChild(c);var e=a/b|0;this.Timers.Repeat(b,function(a){a==
e?c.RemoveFromParent():c.Visible=!c.Visible},void 0,e)};b.prototype.MoveCameraTo=function(a,b){void 0===b&&(b=1);a=a.Clone();core.vector.Subtract(this.ScreenCenter,a,a);return this.CameraTweens.New(this.Purgatory.Position).To({x:a.x,y:a.y},b,core.easing.SinusoidalInOut).Start()};b.prototype.CenterCamera=function(){core.vector.Subtract(this.ScreenCenter,this.Purgatory.Player.Position,this.Purgatory.Position)};return b}(c.AbstractState);c.PlayState=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){c.prototype.Start.call(this);game.context.Reset();var a=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24)),b=game.assets.MAIN_MENU_SCENE;this.BgScene=new gfx.AnimatedSprite(0,7,64,64);b=this.BgScene.Animator.AddAnimation("idle",b.map(function(a,b){return b}),b.map(function(b){b=a.GetSprite(b);b.SourceRect.Size.Set(64,64);b.Size.Set(64,64);return b}));b.Loop=!0;b.Duration=2;this.BgScene.Animator.Play("idle");
b=new gfx.AAText(5,3,"SLUMBER KNIGHT");b.SetSize(5);var d=new gfx.AAText(17,50,"PRESS UP"),e=new gfx.AAText(17,56,"TO START");d.SetSize(5);e.SetSize(5);this.Stage.AddChild(this.BgScene,d,e,b);this.DimScreen(!0,2);this.Timers.Delay(0,function(){return audio.manager.Play("fireplace",1,!0)});this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};b.prototype.Update=function(a){c.prototype.Update.call(this,a);this.BgScene.Update(a)};b.prototype.OnKeyUp=function(a){};
b.prototype.OnKeyDown=function(a){this.Game.Play("intro")};return b}(c.AbstractState);c.Menu=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){var a=this;this.DefaultSize.Set(64,64);c.prototype.Start.call(this);var b=new gfx.AAText(15,30,"LOADING");b.SetSize(5);var d="",e=this.Timers.Repeat(.5,function(){d=3===d.length?"":d+".";b.SetText("LOADING "+d)});this.Stage.AddChild(b);var g=gfx.Sprite.Load(["spritesheet","assets/images/spritesheet.png"]),k=audio.manager.LoadAll([["fight-scene",["assets/audio/fight-scene-music.mp3"]],["fireplace",
["assets/audio/fireplace.mp3"]],["monster-fight",["assets/audio/monster-fight.wav"]],["demon-slayed",["assets/audio/demon-slayed.wav"]],["demon-hit",["assets/audio/demon-hit.wav"]],["floor-collapsing",["assets/audio/floor-collapsing.wav"]],["item-aquired",["assets/audio/item-aquired.wav"]],["you-died",["assets/audio/you-died.wav"]],["temple",["assets/audio/temple-music.mp3"]]]);Promise.all([g,k]).then(function(){a.Game.Play("splash")},function(a){e.Stop();b.SetText("ERROR");b.SetColor("red");console.error(a)});
this.OnResize()};return b}(c.AbstractState);c.LoadingState=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){var a=this;this.IsKeyDown=[];this.DefaultSize.Set(64,64);c.prototype.Start.call(this);var b=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24)),d=new gfx.AAText(17,27,"YOU DIED");d.SetSize(5);for(var e=function(a){var c=b.GetSprite(game.assets.HEART_FRAME),d=b.GetSprite(game.assets.HEART_FILL);c.Position.Set(14+10*a,35);d.Position.Set(14+10*a,35);g.Stage.AddChild(c);a<=game.context.LifesLeft&&
g.Stage.AddChild(d);a==game.context.LifesLeft&&g.Timers.Repeat(.3,function(){return d.Visible=!d.Visible},void 0,11)},g=this,k=0;4>k;++k)e(k);this.Stage.AddChild(d);this.DimScreen(!0,2);this.Timers.Delay(0,function(){return audio.manager.Play("you-died")});this.Timers.Delay(4,function(){return a.OnKeyDown(38)});this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};b.prototype.OnKeyUp=function(a){this.IsKeyDown[a]=!1};b.prototype.OnKeyDown=function(a){0<game.context.LifesLeft?
this.Game.Play("play"):this.Game.Play("menu")};b.prototype.DimScreen=function(a,b){void 0===a&&(a=!1);void 0===b&&(b=2);a&&(this.Stage.Alpha=1-this.Stage.Alpha);return this.Tweens.New(this.Stage).To({Alpha:a?1:0},b).Start()};return b}(c.AbstractState);c.YouDiedState=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){var a=this;this.DefaultSize.Set(64,64);c.prototype.Start.call(this);var b=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24)),d=new gfx.AAText(9,27,"DEMON SLAYED");d.SetSize(5);for(var e=0;4>e;++e){var g=b.GetSprite(game.assets.HEART_FRAME),k=b.GetSprite(game.assets.HEART_FILL);g.Position.Set(14+10*e,35);k.Position.Set(14+10*e,35);this.Stage.AddChild(g);e<game.context.LifesLeft&&this.Stage.AddChild(k)}this.Stage.AddChild(d);
this.DimScreen(!0,2);this.Timers.Delay(0,function(){return audio.manager.Play("demon-slayed")});this.Timers.Delay(4,function(){return a.OnKeyDown(38)});this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};b.prototype.OnKeyDown=function(a){game.context.AllDemonsKilled()?this.Game.Play("epilog"):this.Game.Play("play")};return b}(c.AbstractState);c.DemonSlayedState=g})(state||(state={}));
(function(c){var g=function(c){function b(){c.apply(this,arguments)}__extends(b,c);b.prototype.Start=function(){var a=this;this.DefaultSize.Set(64,64);c.prototype.Start.call(this);new gfx.SpriteSheet("spritesheet",new core.Vector(24,24));var b;["THEY","ALL","GONE","NOW"].forEach(function(c,d){var f=new gfx.AAText(32,32,c);f.Anchor.Set(.5,.5);f.SetSize(5);f.Alpha=0;a.Stage.AddChild(f);b=a.Tweens.New(f).Delay(1+2*d).Then().To({Alpha:1}).Then().To({Alpha:0}).WhenDone(function(){return f.RemoveFromParent()}).Start()});
b.WhenDone(function(){var b=new gfx.AAText(32,32,"WAKE UP!");b.Anchor.Set(.5,.5);b.SetSize(5);b.Alpha=0;a.Stage.AddChild(b);a.Tweens.New(b).Then().To({Alpha:1}).WhenDone(function(){return a.ShakeScreen(.5)}).Then().Delay(1).WhenDone(function(){b.Scale.Set(2,2);a.ShakeScreen(.5)}).Then().Delay(1).WhenDone(function(){return b.RemoveFromParent()}).Start()});var d=new core.Layer(0,74);"THANK YOU;FOR PLAYING;;FOR MORE NEWS;FOLLOW ME ON;TWITTER;KAKUS_DEV".split(";").forEach(function(a,b,c){a=new gfx.AAText(32,
7*b,a);a.SetSize(5);a.Anchor.Set(.5,.5);b==c.length-1&&a.SetColor("#55acee");d.AddChild(a)});this.Timers.Delay(15,function(){a.Stage.AddChild(d);a.Tweens.New(d.Position).To({y:12},5).Start()});this.DimScreen(!0,2);this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};b.prototype.OnKeyDown=function(a){this.Game.Play("menu")};return b}(c.AbstractState);c.EpilogState=g})(state||(state={}));
(function(c){var g=function(b){return b.Set(Math.floor(b.x),Math.floor(b.y))},f=function(b){function a(){b.apply(this,arguments)}__extends(a,b);a.prototype.Start=function(){var a=this;b.prototype.Start.call(this);var c=new gfx.SpriteSheet("spritesheet",new core.Vector(24,24)),e=game.assets.INTRO_SCENE;this.Intro=new gfx.AnimatedSprite(0,0,64,64);this.Intro.Animator.AddAnimation("idle",e.map(function(a,b){return b}),e.map(function(a){a=c.GetSprite(a);a.SourceRect.Size.Set(64,64);a.SourceRect.Position.x+=
4;a.SourceRect.Position.y+=4;a.Size.Set(64,64);return a})).Duration=2;this.Intro.Animator.AddAnimation("freeze",[0],[e[0]].map(function(a){a=c.GetSprite(a);a.SourceRect.Size.Set(64,64);a.SourceRect.Position.x+=4;a.SourceRect.Position.y+=4;a.Size.Set(64,64);return a}));this.Intro.Animator.Play("freeze");this.Stage.AddChild(this.Intro);this.Intro.Position.Set(0,64);this.Tweens.New(this.Intro.Position).Delay(1).Then().To({y:0},2,core.easing.CubicOut).OnUpdate(g).Start().WhenDone(function(){a.Intro.Animator.Play("idle");
a.Timers.Delay(2,function(){a.DimScreen();a.Timers.Delay(2,function(){a.OnKeyDown(0)})})});this.DimScreen(!0,2);this.InputController=new core.GenericInputController;this.ListenForKeyboard();this.OnResize()};a.prototype.Update=function(a){b.prototype.Update.call(this,a);this.Intro.Update(a)};a.prototype.OnKeyUp=function(a){};a.prototype.OnKeyDown=function(a){this.Game.Play("you-died")};return a}(c.AbstractState);c.IntroState=f})(state||(state={}));var GAME=new core.Game("canvas");
GAME.AddState("splash",new state.SplashScreen);GAME.AddState("loading",new state.LoadingState);GAME.AddState("menu",new state.Menu);GAME.AddState("play",new state.PlayState);GAME.AddState("you-died",new state.YouDiedState);GAME.AddState("demon-slayed",new state.DemonSlayedState);GAME.AddState("epilog",new state.EpilogState);GAME.AddState("intro",new state.IntroState);GAME.Play("loading");GAME.Start();
